// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: media.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_media_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_media_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_media_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_media_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_media_2eproto;
namespace media_message {
class MediaData;
struct MediaDataDefaultTypeInternal;
extern MediaDataDefaultTypeInternal _MediaData_default_instance_;
class MediaDataHeader;
struct MediaDataHeaderDefaultTypeInternal;
extern MediaDataHeaderDefaultTypeInternal _MediaDataHeader_default_instance_;
class MediaDataHeader_Audio;
struct MediaDataHeader_AudioDefaultTypeInternal;
extern MediaDataHeader_AudioDefaultTypeInternal _MediaDataHeader_Audio_default_instance_;
class MediaDataHeader_Video;
struct MediaDataHeader_VideoDefaultTypeInternal;
extern MediaDataHeader_VideoDefaultTypeInternal _MediaDataHeader_Video_default_instance_;
class StreamMessage;
struct StreamMessageDefaultTypeInternal;
extern StreamMessageDefaultTypeInternal _StreamMessage_default_instance_;
class StreamMessage_IdrRequest;
struct StreamMessage_IdrRequestDefaultTypeInternal;
extern StreamMessage_IdrRequestDefaultTypeInternal _StreamMessage_IdrRequest_default_instance_;
class StreamMessage_Join;
struct StreamMessage_JoinDefaultTypeInternal;
extern StreamMessage_JoinDefaultTypeInternal _StreamMessage_Join_default_instance_;
class StreamMessage_JoinAck;
struct StreamMessage_JoinAckDefaultTypeInternal;
extern StreamMessage_JoinAckDefaultTypeInternal _StreamMessage_JoinAck_default_instance_;
class StreamMessage_StreamContent;
struct StreamMessage_StreamContentDefaultTypeInternal;
extern StreamMessage_StreamContentDefaultTypeInternal _StreamMessage_StreamContent_default_instance_;
class StreamMessage_StreamContentAck;
struct StreamMessage_StreamContentAckDefaultTypeInternal;
extern StreamMessage_StreamContentAckDefaultTypeInternal _StreamMessage_StreamContentAck_default_instance_;
class StreamMessage_StreamContentNack;
struct StreamMessage_StreamContentNackDefaultTypeInternal;
extern StreamMessage_StreamContentNackDefaultTypeInternal _StreamMessage_StreamContentNack_default_instance_;
class StreamMessage_StreamContentNack_Ack;
struct StreamMessage_StreamContentNack_AckDefaultTypeInternal;
extern StreamMessage_StreamContentNack_AckDefaultTypeInternal _StreamMessage_StreamContentNack_Ack_default_instance_;
}  // namespace media_message
PROTOBUF_NAMESPACE_OPEN
template<> ::media_message::MediaData* Arena::CreateMaybeMessage<::media_message::MediaData>(Arena*);
template<> ::media_message::MediaDataHeader* Arena::CreateMaybeMessage<::media_message::MediaDataHeader>(Arena*);
template<> ::media_message::MediaDataHeader_Audio* Arena::CreateMaybeMessage<::media_message::MediaDataHeader_Audio>(Arena*);
template<> ::media_message::MediaDataHeader_Video* Arena::CreateMaybeMessage<::media_message::MediaDataHeader_Video>(Arena*);
template<> ::media_message::StreamMessage* Arena::CreateMaybeMessage<::media_message::StreamMessage>(Arena*);
template<> ::media_message::StreamMessage_IdrRequest* Arena::CreateMaybeMessage<::media_message::StreamMessage_IdrRequest>(Arena*);
template<> ::media_message::StreamMessage_Join* Arena::CreateMaybeMessage<::media_message::StreamMessage_Join>(Arena*);
template<> ::media_message::StreamMessage_JoinAck* Arena::CreateMaybeMessage<::media_message::StreamMessage_JoinAck>(Arena*);
template<> ::media_message::StreamMessage_StreamContent* Arena::CreateMaybeMessage<::media_message::StreamMessage_StreamContent>(Arena*);
template<> ::media_message::StreamMessage_StreamContentAck* Arena::CreateMaybeMessage<::media_message::StreamMessage_StreamContentAck>(Arena*);
template<> ::media_message::StreamMessage_StreamContentNack* Arena::CreateMaybeMessage<::media_message::StreamMessage_StreamContentNack>(Arena*);
template<> ::media_message::StreamMessage_StreamContentNack_Ack* Arena::CreateMaybeMessage<::media_message::StreamMessage_StreamContentNack_Ack>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace media_message {

enum MediaDataHeader_VideoFrameType : int {
  MediaDataHeader_VideoFrameType_None = 0,
  MediaDataHeader_VideoFrameType_Idr = 1,
  MediaDataHeader_VideoFrameType_MediaDataHeader_VideoFrameType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MediaDataHeader_VideoFrameType_MediaDataHeader_VideoFrameType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MediaDataHeader_VideoFrameType_IsValid(int value);
constexpr MediaDataHeader_VideoFrameType MediaDataHeader_VideoFrameType_VideoFrameType_MIN = MediaDataHeader_VideoFrameType_None;
constexpr MediaDataHeader_VideoFrameType MediaDataHeader_VideoFrameType_VideoFrameType_MAX = MediaDataHeader_VideoFrameType_Idr;
constexpr int MediaDataHeader_VideoFrameType_VideoFrameType_ARRAYSIZE = MediaDataHeader_VideoFrameType_VideoFrameType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MediaDataHeader_VideoFrameType_descriptor();
template<typename T>
inline const std::string& MediaDataHeader_VideoFrameType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MediaDataHeader_VideoFrameType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MediaDataHeader_VideoFrameType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MediaDataHeader_VideoFrameType_descriptor(), enum_t_value);
}
inline bool MediaDataHeader_VideoFrameType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MediaDataHeader_VideoFrameType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MediaDataHeader_VideoFrameType>(
    MediaDataHeader_VideoFrameType_descriptor(), name, value);
}
enum MediaType : int {
  OPUS_40K_20MS = 0,
  AV1 = 1,
  L16 = 2,
  F32 = 3,
  RAW = 4,
  MediaType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MediaType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MediaType_IsValid(int value);
constexpr MediaType MediaType_MIN = OPUS_40K_20MS;
constexpr MediaType MediaType_MAX = RAW;
constexpr int MediaType_ARRAYSIZE = MediaType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MediaType_descriptor();
template<typename T>
inline const std::string& MediaType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MediaType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MediaType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MediaType_descriptor(), enum_t_value);
}
inline bool MediaType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MediaType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MediaType>(
    MediaType_descriptor(), name, value);
}
enum PacketizeType : int {
  None = 0,
  Simple = 1,
  PacketizeType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PacketizeType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PacketizeType_IsValid(int value);
constexpr PacketizeType PacketizeType_MIN = None;
constexpr PacketizeType PacketizeType_MAX = Simple;
constexpr int PacketizeType_ARRAYSIZE = PacketizeType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PacketizeType_descriptor();
template<typename T>
inline const std::string& PacketizeType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PacketizeType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PacketizeType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PacketizeType_descriptor(), enum_t_value);
}
inline bool PacketizeType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PacketizeType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PacketizeType>(
    PacketizeType_descriptor(), name, value);
}
// ===================================================================

class MediaDataHeader_Audio final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:media_message.MediaDataHeader.Audio) */ {
 public:
  inline MediaDataHeader_Audio() : MediaDataHeader_Audio(nullptr) {}
  ~MediaDataHeader_Audio() override;
  explicit constexpr MediaDataHeader_Audio(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MediaDataHeader_Audio(const MediaDataHeader_Audio& from);
  MediaDataHeader_Audio(MediaDataHeader_Audio&& from) noexcept
    : MediaDataHeader_Audio() {
    *this = ::std::move(from);
  }

  inline MediaDataHeader_Audio& operator=(const MediaDataHeader_Audio& from) {
    CopyFrom(from);
    return *this;
  }
  inline MediaDataHeader_Audio& operator=(MediaDataHeader_Audio&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MediaDataHeader_Audio& default_instance() {
    return *internal_default_instance();
  }
  static inline const MediaDataHeader_Audio* internal_default_instance() {
    return reinterpret_cast<const MediaDataHeader_Audio*>(
               &_MediaDataHeader_Audio_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MediaDataHeader_Audio& a, MediaDataHeader_Audio& b) {
    a.Swap(&b);
  }
  inline void Swap(MediaDataHeader_Audio* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MediaDataHeader_Audio* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MediaDataHeader_Audio* New() const final {
    return new MediaDataHeader_Audio();
  }

  MediaDataHeader_Audio* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MediaDataHeader_Audio>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MediaDataHeader_Audio& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MediaDataHeader_Audio& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MediaDataHeader_Audio* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "media_message.MediaDataHeader.Audio";
  }
  protected:
  explicit MediaDataHeader_Audio(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAudioEnergyLevelFieldNumber = 1,
  };
  // float audioEnergyLevel = 1;
  void clear_audioenergylevel();
  float audioenergylevel() const;
  void set_audioenergylevel(float value);
  private:
  float _internal_audioenergylevel() const;
  void _internal_set_audioenergylevel(float value);
  public:

  // @@protoc_insertion_point(class_scope:media_message.MediaDataHeader.Audio)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float audioenergylevel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_media_2eproto;
};
// -------------------------------------------------------------------

class MediaDataHeader_Video final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:media_message.MediaDataHeader.Video) */ {
 public:
  inline MediaDataHeader_Video() : MediaDataHeader_Video(nullptr) {}
  ~MediaDataHeader_Video() override;
  explicit constexpr MediaDataHeader_Video(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MediaDataHeader_Video(const MediaDataHeader_Video& from);
  MediaDataHeader_Video(MediaDataHeader_Video&& from) noexcept
    : MediaDataHeader_Video() {
    *this = ::std::move(from);
  }

  inline MediaDataHeader_Video& operator=(const MediaDataHeader_Video& from) {
    CopyFrom(from);
    return *this;
  }
  inline MediaDataHeader_Video& operator=(MediaDataHeader_Video&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MediaDataHeader_Video& default_instance() {
    return *internal_default_instance();
  }
  static inline const MediaDataHeader_Video* internal_default_instance() {
    return reinterpret_cast<const MediaDataHeader_Video*>(
               &_MediaDataHeader_Video_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MediaDataHeader_Video& a, MediaDataHeader_Video& b) {
    a.Swap(&b);
  }
  inline void Swap(MediaDataHeader_Video* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MediaDataHeader_Video* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MediaDataHeader_Video* New() const final {
    return new MediaDataHeader_Video();
  }

  MediaDataHeader_Video* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MediaDataHeader_Video>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MediaDataHeader_Video& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MediaDataHeader_Video& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MediaDataHeader_Video* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "media_message.MediaDataHeader.Video";
  }
  protected:
  explicit MediaDataHeader_Video(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarkerFieldNumber = 1,
    kIntraFrameFieldNumber = 2,
    kDiscardableFieldNumber = 3,
    kSpatialLayerIdFieldNumber = 4,
    kTemporalLayerIdFieldNumber = 5,
  };
  // .media_message.MediaDataHeader.VideoFrameType marker = 1;
  void clear_marker();
  ::media_message::MediaDataHeader_VideoFrameType marker() const;
  void set_marker(::media_message::MediaDataHeader_VideoFrameType value);
  private:
  ::media_message::MediaDataHeader_VideoFrameType _internal_marker() const;
  void _internal_set_marker(::media_message::MediaDataHeader_VideoFrameType value);
  public:

  // bool intraFrame = 2;
  void clear_intraframe();
  bool intraframe() const;
  void set_intraframe(bool value);
  private:
  bool _internal_intraframe() const;
  void _internal_set_intraframe(bool value);
  public:

  // bool discardable = 3;
  void clear_discardable();
  bool discardable() const;
  void set_discardable(bool value);
  private:
  bool _internal_discardable() const;
  void _internal_set_discardable(bool value);
  public:

  // uint32 spatialLayerId = 4;
  void clear_spatiallayerid();
  ::PROTOBUF_NAMESPACE_ID::uint32 spatiallayerid() const;
  void set_spatiallayerid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_spatiallayerid() const;
  void _internal_set_spatiallayerid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 temporalLayerId = 5;
  void clear_temporallayerid();
  ::PROTOBUF_NAMESPACE_ID::uint32 temporallayerid() const;
  void set_temporallayerid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_temporallayerid() const;
  void _internal_set_temporallayerid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:media_message.MediaDataHeader.Video)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int marker_;
  bool intraframe_;
  bool discardable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 spatiallayerid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 temporallayerid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_media_2eproto;
};
// -------------------------------------------------------------------

class MediaDataHeader final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:media_message.MediaDataHeader) */ {
 public:
  inline MediaDataHeader() : MediaDataHeader(nullptr) {}
  ~MediaDataHeader() override;
  explicit constexpr MediaDataHeader(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MediaDataHeader(const MediaDataHeader& from);
  MediaDataHeader(MediaDataHeader&& from) noexcept
    : MediaDataHeader() {
    *this = ::std::move(from);
  }

  inline MediaDataHeader& operator=(const MediaDataHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline MediaDataHeader& operator=(MediaDataHeader&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MediaDataHeader& default_instance() {
    return *internal_default_instance();
  }
  enum HeaderCase {
    kAudioHeader = 7,
    kVideoHeader = 8,
    HEADER_NOT_SET = 0,
  };

  static inline const MediaDataHeader* internal_default_instance() {
    return reinterpret_cast<const MediaDataHeader*>(
               &_MediaDataHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MediaDataHeader& a, MediaDataHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(MediaDataHeader* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MediaDataHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MediaDataHeader* New() const final {
    return new MediaDataHeader();
  }

  MediaDataHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MediaDataHeader>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MediaDataHeader& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MediaDataHeader& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MediaDataHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "media_message.MediaDataHeader";
  }
  protected:
  explicit MediaDataHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MediaDataHeader_Audio Audio;
  typedef MediaDataHeader_Video Video;

  typedef MediaDataHeader_VideoFrameType VideoFrameType;
  static constexpr VideoFrameType None =
    MediaDataHeader_VideoFrameType_None;
  static constexpr VideoFrameType Idr =
    MediaDataHeader_VideoFrameType_Idr;
  static inline bool VideoFrameType_IsValid(int value) {
    return MediaDataHeader_VideoFrameType_IsValid(value);
  }
  static constexpr VideoFrameType VideoFrameType_MIN =
    MediaDataHeader_VideoFrameType_VideoFrameType_MIN;
  static constexpr VideoFrameType VideoFrameType_MAX =
    MediaDataHeader_VideoFrameType_VideoFrameType_MAX;
  static constexpr int VideoFrameType_ARRAYSIZE =
    MediaDataHeader_VideoFrameType_VideoFrameType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  VideoFrameType_descriptor() {
    return MediaDataHeader_VideoFrameType_descriptor();
  }
  template<typename T>
  static inline const std::string& VideoFrameType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, VideoFrameType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function VideoFrameType_Name.");
    return MediaDataHeader_VideoFrameType_Name(enum_t_value);
  }
  static inline bool VideoFrameType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      VideoFrameType* value) {
    return MediaDataHeader_VideoFrameType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSourceIDFieldNumber = 2,
    kSourceRecordTimeFieldNumber = 3,
    kSequenceNumberFieldNumber = 4,
    kMediaTypeFieldNumber = 1,
    kPacketizeTypeFieldNumber = 9,
    kPacketNumberFieldNumber = 10,
    kPriorityLevelFieldNumber = 13,
    kPacketCountFieldNumber = 11,
    kFrameSizeFieldNumber = 12,
    kAudioHeaderFieldNumber = 7,
    kVideoHeaderFieldNumber = 8,
  };
  // uint64 sourceID = 2;
  void clear_sourceid();
  ::PROTOBUF_NAMESPACE_ID::uint64 sourceid() const;
  void set_sourceid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sourceid() const;
  void _internal_set_sourceid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // fixed64 sourceRecordTime = 3;
  void clear_sourcerecordtime();
  ::PROTOBUF_NAMESPACE_ID::uint64 sourcerecordtime() const;
  void set_sourcerecordtime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sourcerecordtime() const;
  void _internal_set_sourcerecordtime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 sequenceNumber = 4;
  void clear_sequencenumber();
  ::PROTOBUF_NAMESPACE_ID::uint64 sequencenumber() const;
  void set_sequencenumber(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sequencenumber() const;
  void _internal_set_sequencenumber(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .media_message.MediaType mediaType = 1;
  void clear_mediatype();
  ::media_message::MediaType mediatype() const;
  void set_mediatype(::media_message::MediaType value);
  private:
  ::media_message::MediaType _internal_mediatype() const;
  void _internal_set_mediatype(::media_message::MediaType value);
  public:

  // .media_message.PacketizeType packetizeType = 9;
  void clear_packetizetype();
  ::media_message::PacketizeType packetizetype() const;
  void set_packetizetype(::media_message::PacketizeType value);
  private:
  ::media_message::PacketizeType _internal_packetizetype() const;
  void _internal_set_packetizetype(::media_message::PacketizeType value);
  public:

  // uint64 packetNumber = 10;
  void clear_packetnumber();
  ::PROTOBUF_NAMESPACE_ID::uint64 packetnumber() const;
  void set_packetnumber(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_packetnumber() const;
  void _internal_set_packetnumber(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 priorityLevel = 13;
  void clear_prioritylevel();
  ::PROTOBUF_NAMESPACE_ID::uint32 prioritylevel() const;
  void set_prioritylevel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_prioritylevel() const;
  void _internal_set_prioritylevel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 packetCount = 11;
  void clear_packetcount();
  ::PROTOBUF_NAMESPACE_ID::uint64 packetcount() const;
  void set_packetcount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_packetcount() const;
  void _internal_set_packetcount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 frameSize = 12;
  void clear_framesize();
  ::PROTOBUF_NAMESPACE_ID::uint64 framesize() const;
  void set_framesize(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_framesize() const;
  void _internal_set_framesize(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .media_message.MediaDataHeader.Audio audio_header = 7;
  bool has_audio_header() const;
  private:
  bool _internal_has_audio_header() const;
  public:
  void clear_audio_header();
  const ::media_message::MediaDataHeader_Audio& audio_header() const;
  PROTOBUF_MUST_USE_RESULT ::media_message::MediaDataHeader_Audio* release_audio_header();
  ::media_message::MediaDataHeader_Audio* mutable_audio_header();
  void set_allocated_audio_header(::media_message::MediaDataHeader_Audio* audio_header);
  private:
  const ::media_message::MediaDataHeader_Audio& _internal_audio_header() const;
  ::media_message::MediaDataHeader_Audio* _internal_mutable_audio_header();
  public:
  void unsafe_arena_set_allocated_audio_header(
      ::media_message::MediaDataHeader_Audio* audio_header);
  ::media_message::MediaDataHeader_Audio* unsafe_arena_release_audio_header();

  // .media_message.MediaDataHeader.Video video_header = 8;
  bool has_video_header() const;
  private:
  bool _internal_has_video_header() const;
  public:
  void clear_video_header();
  const ::media_message::MediaDataHeader_Video& video_header() const;
  PROTOBUF_MUST_USE_RESULT ::media_message::MediaDataHeader_Video* release_video_header();
  ::media_message::MediaDataHeader_Video* mutable_video_header();
  void set_allocated_video_header(::media_message::MediaDataHeader_Video* video_header);
  private:
  const ::media_message::MediaDataHeader_Video& _internal_video_header() const;
  ::media_message::MediaDataHeader_Video* _internal_mutable_video_header();
  public:
  void unsafe_arena_set_allocated_video_header(
      ::media_message::MediaDataHeader_Video* video_header);
  ::media_message::MediaDataHeader_Video* unsafe_arena_release_video_header();

  void clear_header();
  HeaderCase header_case() const;
  // @@protoc_insertion_point(class_scope:media_message.MediaDataHeader)
 private:
  class _Internal;
  void set_has_audio_header();
  void set_has_video_header();

  inline bool has_header() const;
  inline void clear_has_header();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sourceid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sourcerecordtime_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sequencenumber_;
  int mediatype_;
  int packetizetype_;
  ::PROTOBUF_NAMESPACE_ID::uint64 packetnumber_;
  ::PROTOBUF_NAMESPACE_ID::uint32 prioritylevel_;
  ::PROTOBUF_NAMESPACE_ID::uint64 packetcount_;
  ::PROTOBUF_NAMESPACE_ID::uint64 framesize_;
  union HeaderUnion {
    constexpr HeaderUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::media_message::MediaDataHeader_Audio* audio_header_;
    ::media_message::MediaDataHeader_Video* video_header_;
  } header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_media_2eproto;
};
// -------------------------------------------------------------------

class MediaData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:media_message.MediaData) */ {
 public:
  inline MediaData() : MediaData(nullptr) {}
  ~MediaData() override;
  explicit constexpr MediaData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MediaData(const MediaData& from);
  MediaData(MediaData&& from) noexcept
    : MediaData() {
    *this = ::std::move(from);
  }

  inline MediaData& operator=(const MediaData& from) {
    CopyFrom(from);
    return *this;
  }
  inline MediaData& operator=(MediaData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MediaData& default_instance() {
    return *internal_default_instance();
  }
  static inline const MediaData* internal_default_instance() {
    return reinterpret_cast<const MediaData*>(
               &_MediaData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MediaData& a, MediaData& b) {
    a.Swap(&b);
  }
  inline void Swap(MediaData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MediaData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MediaData* New() const final {
    return new MediaData();
  }

  MediaData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MediaData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MediaData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MediaData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MediaData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "media_message.MediaData";
  }
  protected:
  explicit MediaData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncryptedMediaDataFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // bytes encryptedMediaData = 2;
  void clear_encryptedmediadata();
  const std::string& encryptedmediadata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_encryptedmediadata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_encryptedmediadata();
  PROTOBUF_MUST_USE_RESULT std::string* release_encryptedmediadata();
  void set_allocated_encryptedmediadata(std::string* encryptedmediadata);
  private:
  const std::string& _internal_encryptedmediadata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_encryptedmediadata(const std::string& value);
  std::string* _internal_mutable_encryptedmediadata();
  public:

  // .media_message.MediaDataHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::media_message::MediaDataHeader& header() const;
  PROTOBUF_MUST_USE_RESULT ::media_message::MediaDataHeader* release_header();
  ::media_message::MediaDataHeader* mutable_header();
  void set_allocated_header(::media_message::MediaDataHeader* header);
  private:
  const ::media_message::MediaDataHeader& _internal_header() const;
  ::media_message::MediaDataHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::media_message::MediaDataHeader* header);
  ::media_message::MediaDataHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:media_message.MediaData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encryptedmediadata_;
  ::media_message::MediaDataHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_media_2eproto;
};
// -------------------------------------------------------------------

class StreamMessage_Join final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:media_message.StreamMessage.Join) */ {
 public:
  inline StreamMessage_Join() : StreamMessage_Join(nullptr) {}
  ~StreamMessage_Join() override;
  explicit constexpr StreamMessage_Join(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamMessage_Join(const StreamMessage_Join& from);
  StreamMessage_Join(StreamMessage_Join&& from) noexcept
    : StreamMessage_Join() {
    *this = ::std::move(from);
  }

  inline StreamMessage_Join& operator=(const StreamMessage_Join& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamMessage_Join& operator=(StreamMessage_Join&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamMessage_Join& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamMessage_Join* internal_default_instance() {
    return reinterpret_cast<const StreamMessage_Join*>(
               &_StreamMessage_Join_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(StreamMessage_Join& a, StreamMessage_Join& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamMessage_Join* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamMessage_Join* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamMessage_Join* New() const final {
    return new StreamMessage_Join();
  }

  StreamMessage_Join* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamMessage_Join>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StreamMessage_Join& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StreamMessage_Join& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamMessage_Join* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "media_message.StreamMessage.Join";
  }
  protected:
  explicit StreamMessage_Join(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEchoFieldNumber = 1,
  };
  // bool echo = 1;
  void clear_echo();
  bool echo() const;
  void set_echo(bool value);
  private:
  bool _internal_echo() const;
  void _internal_set_echo(bool value);
  public:

  // @@protoc_insertion_point(class_scope:media_message.StreamMessage.Join)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool echo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_media_2eproto;
};
// -------------------------------------------------------------------

class StreamMessage_JoinAck final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:media_message.StreamMessage.JoinAck) */ {
 public:
  inline StreamMessage_JoinAck() : StreamMessage_JoinAck(nullptr) {}
  explicit constexpr StreamMessage_JoinAck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamMessage_JoinAck(const StreamMessage_JoinAck& from);
  StreamMessage_JoinAck(StreamMessage_JoinAck&& from) noexcept
    : StreamMessage_JoinAck() {
    *this = ::std::move(from);
  }

  inline StreamMessage_JoinAck& operator=(const StreamMessage_JoinAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamMessage_JoinAck& operator=(StreamMessage_JoinAck&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamMessage_JoinAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamMessage_JoinAck* internal_default_instance() {
    return reinterpret_cast<const StreamMessage_JoinAck*>(
               &_StreamMessage_JoinAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(StreamMessage_JoinAck& a, StreamMessage_JoinAck& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamMessage_JoinAck* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamMessage_JoinAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamMessage_JoinAck* New() const final {
    return new StreamMessage_JoinAck();
  }

  StreamMessage_JoinAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamMessage_JoinAck>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const StreamMessage_JoinAck& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const StreamMessage_JoinAck& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "media_message.StreamMessage.JoinAck";
  }
  protected:
  explicit StreamMessage_JoinAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:media_message.StreamMessage.JoinAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_media_2eproto;
};
// -------------------------------------------------------------------

class StreamMessage_IdrRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:media_message.StreamMessage.IdrRequest) */ {
 public:
  inline StreamMessage_IdrRequest() : StreamMessage_IdrRequest(nullptr) {}
  ~StreamMessage_IdrRequest() override;
  explicit constexpr StreamMessage_IdrRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamMessage_IdrRequest(const StreamMessage_IdrRequest& from);
  StreamMessage_IdrRequest(StreamMessage_IdrRequest&& from) noexcept
    : StreamMessage_IdrRequest() {
    *this = ::std::move(from);
  }

  inline StreamMessage_IdrRequest& operator=(const StreamMessage_IdrRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamMessage_IdrRequest& operator=(StreamMessage_IdrRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamMessage_IdrRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamMessage_IdrRequest* internal_default_instance() {
    return reinterpret_cast<const StreamMessage_IdrRequest*>(
               &_StreamMessage_IdrRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(StreamMessage_IdrRequest& a, StreamMessage_IdrRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamMessage_IdrRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamMessage_IdrRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamMessage_IdrRequest* New() const final {
    return new StreamMessage_IdrRequest();
  }

  StreamMessage_IdrRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamMessage_IdrRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StreamMessage_IdrRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StreamMessage_IdrRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamMessage_IdrRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "media_message.StreamMessage.IdrRequest";
  }
  protected:
  explicit StreamMessage_IdrRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIdFieldNumber = 1,
    kSourceIdFieldNumber = 2,
    kSourceTimestampFieldNumber = 3,
  };
  // uint64 client_id = 1;
  void clear_client_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 client_id() const;
  void set_client_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_client_id() const;
  void _internal_set_client_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 source_id = 2;
  void clear_source_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 source_id() const;
  void set_source_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_source_id() const;
  void _internal_set_source_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 source_timestamp = 3;
  void clear_source_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 source_timestamp() const;
  void set_source_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_source_timestamp() const;
  void _internal_set_source_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:media_message.StreamMessage.IdrRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 client_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 source_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 source_timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_media_2eproto;
};
// -------------------------------------------------------------------

class StreamMessage_StreamContent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:media_message.StreamMessage.StreamContent) */ {
 public:
  inline StreamMessage_StreamContent() : StreamMessage_StreamContent(nullptr) {}
  ~StreamMessage_StreamContent() override;
  explicit constexpr StreamMessage_StreamContent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamMessage_StreamContent(const StreamMessage_StreamContent& from);
  StreamMessage_StreamContent(StreamMessage_StreamContent&& from) noexcept
    : StreamMessage_StreamContent() {
    *this = ::std::move(from);
  }

  inline StreamMessage_StreamContent& operator=(const StreamMessage_StreamContent& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamMessage_StreamContent& operator=(StreamMessage_StreamContent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamMessage_StreamContent& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamMessage_StreamContent* internal_default_instance() {
    return reinterpret_cast<const StreamMessage_StreamContent*>(
               &_StreamMessage_StreamContent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(StreamMessage_StreamContent& a, StreamMessage_StreamContent& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamMessage_StreamContent* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamMessage_StreamContent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamMessage_StreamContent* New() const final {
    return new StreamMessage_StreamContent();
  }

  StreamMessage_StreamContent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamMessage_StreamContent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StreamMessage_StreamContent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StreamMessage_StreamContent& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamMessage_StreamContent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "media_message.StreamMessage.StreamContent";
  }
  protected:
  explicit StreamMessage_StreamContent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMediaDataFieldNumber = 1,
  };
  // repeated .media_message.MediaData mediaData = 1;
  int mediadata_size() const;
  private:
  int _internal_mediadata_size() const;
  public:
  void clear_mediadata();
  ::media_message::MediaData* mutable_mediadata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::media_message::MediaData >*
      mutable_mediadata();
  private:
  const ::media_message::MediaData& _internal_mediadata(int index) const;
  ::media_message::MediaData* _internal_add_mediadata();
  public:
  const ::media_message::MediaData& mediadata(int index) const;
  ::media_message::MediaData* add_mediadata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::media_message::MediaData >&
      mediadata() const;

  // @@protoc_insertion_point(class_scope:media_message.StreamMessage.StreamContent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::media_message::MediaData > mediadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_media_2eproto;
};
// -------------------------------------------------------------------

class StreamMessage_StreamContentAck final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:media_message.StreamMessage.StreamContentAck) */ {
 public:
  inline StreamMessage_StreamContentAck() : StreamMessage_StreamContentAck(nullptr) {}
  ~StreamMessage_StreamContentAck() override;
  explicit constexpr StreamMessage_StreamContentAck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamMessage_StreamContentAck(const StreamMessage_StreamContentAck& from);
  StreamMessage_StreamContentAck(StreamMessage_StreamContentAck&& from) noexcept
    : StreamMessage_StreamContentAck() {
    *this = ::std::move(from);
  }

  inline StreamMessage_StreamContentAck& operator=(const StreamMessage_StreamContentAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamMessage_StreamContentAck& operator=(StreamMessage_StreamContentAck&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamMessage_StreamContentAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamMessage_StreamContentAck* internal_default_instance() {
    return reinterpret_cast<const StreamMessage_StreamContentAck*>(
               &_StreamMessage_StreamContentAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(StreamMessage_StreamContentAck& a, StreamMessage_StreamContentAck& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamMessage_StreamContentAck* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamMessage_StreamContentAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamMessage_StreamContentAck* New() const final {
    return new StreamMessage_StreamContentAck();
  }

  StreamMessage_StreamContentAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamMessage_StreamContentAck>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StreamMessage_StreamContentAck& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StreamMessage_StreamContentAck& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamMessage_StreamContentAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "media_message.StreamMessage.StreamContentAck";
  }
  protected:
  explicit StreamMessage_StreamContentAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStreamSeqNumFieldNumber = 1,
  };
  // uint64 stream_seq_num = 1;
  void clear_stream_seq_num();
  ::PROTOBUF_NAMESPACE_ID::uint64 stream_seq_num() const;
  void set_stream_seq_num(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_stream_seq_num() const;
  void _internal_set_stream_seq_num(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:media_message.StreamMessage.StreamContentAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 stream_seq_num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_media_2eproto;
};
// -------------------------------------------------------------------

class StreamMessage_StreamContentNack_Ack final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:media_message.StreamMessage.StreamContentNack.Ack) */ {
 public:
  inline StreamMessage_StreamContentNack_Ack() : StreamMessage_StreamContentNack_Ack(nullptr) {}
  ~StreamMessage_StreamContentNack_Ack() override;
  explicit constexpr StreamMessage_StreamContentNack_Ack(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamMessage_StreamContentNack_Ack(const StreamMessage_StreamContentNack_Ack& from);
  StreamMessage_StreamContentNack_Ack(StreamMessage_StreamContentNack_Ack&& from) noexcept
    : StreamMessage_StreamContentNack_Ack() {
    *this = ::std::move(from);
  }

  inline StreamMessage_StreamContentNack_Ack& operator=(const StreamMessage_StreamContentNack_Ack& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamMessage_StreamContentNack_Ack& operator=(StreamMessage_StreamContentNack_Ack&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamMessage_StreamContentNack_Ack& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamMessage_StreamContentNack_Ack* internal_default_instance() {
    return reinterpret_cast<const StreamMessage_StreamContentNack_Ack*>(
               &_StreamMessage_StreamContentNack_Ack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(StreamMessage_StreamContentNack_Ack& a, StreamMessage_StreamContentNack_Ack& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamMessage_StreamContentNack_Ack* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamMessage_StreamContentNack_Ack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamMessage_StreamContentNack_Ack* New() const final {
    return new StreamMessage_StreamContentNack_Ack();
  }

  StreamMessage_StreamContentNack_Ack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamMessage_StreamContentNack_Ack>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StreamMessage_StreamContentNack_Ack& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StreamMessage_StreamContentNack_Ack& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamMessage_StreamContentNack_Ack* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "media_message.StreamMessage.StreamContentNack.Ack";
  }
  protected:
  explicit StreamMessage_StreamContentNack_Ack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSequenceNumberFieldNumber = 1,
    kSenderTimeMsFieldNumber = 2,
    kReceiverTimeMsFieldNumber = 3,
    kPacketSizeFieldNumber = 4,
    kMediaTypeFieldNumber = 5,
  };
  // uint64 sequenceNumber = 1;
  void clear_sequencenumber();
  ::PROTOBUF_NAMESPACE_ID::uint64 sequencenumber() const;
  void set_sequencenumber(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sequencenumber() const;
  void _internal_set_sequencenumber(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // fixed64 senderTimeMs = 2;
  void clear_sendertimems();
  ::PROTOBUF_NAMESPACE_ID::uint64 sendertimems() const;
  void set_sendertimems(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sendertimems() const;
  void _internal_set_sendertimems(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // fixed64 receiverTimeMs = 3;
  void clear_receivertimems();
  ::PROTOBUF_NAMESPACE_ID::uint64 receivertimems() const;
  void set_receivertimems(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_receivertimems() const;
  void _internal_set_receivertimems(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 packetSize = 4;
  void clear_packetsize();
  ::PROTOBUF_NAMESPACE_ID::uint32 packetsize() const;
  void set_packetsize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_packetsize() const;
  void _internal_set_packetsize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .media_message.MediaType mediaType = 5;
  void clear_mediatype();
  ::media_message::MediaType mediatype() const;
  void set_mediatype(::media_message::MediaType value);
  private:
  ::media_message::MediaType _internal_mediatype() const;
  void _internal_set_mediatype(::media_message::MediaType value);
  public:

  // @@protoc_insertion_point(class_scope:media_message.StreamMessage.StreamContentNack.Ack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sequencenumber_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sendertimems_;
  ::PROTOBUF_NAMESPACE_ID::uint64 receivertimems_;
  ::PROTOBUF_NAMESPACE_ID::uint32 packetsize_;
  int mediatype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_media_2eproto;
};
// -------------------------------------------------------------------

class StreamMessage_StreamContentNack final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:media_message.StreamMessage.StreamContentNack) */ {
 public:
  inline StreamMessage_StreamContentNack() : StreamMessage_StreamContentNack(nullptr) {}
  ~StreamMessage_StreamContentNack() override;
  explicit constexpr StreamMessage_StreamContentNack(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamMessage_StreamContentNack(const StreamMessage_StreamContentNack& from);
  StreamMessage_StreamContentNack(StreamMessage_StreamContentNack&& from) noexcept
    : StreamMessage_StreamContentNack() {
    *this = ::std::move(from);
  }

  inline StreamMessage_StreamContentNack& operator=(const StreamMessage_StreamContentNack& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamMessage_StreamContentNack& operator=(StreamMessage_StreamContentNack&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamMessage_StreamContentNack& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamMessage_StreamContentNack* internal_default_instance() {
    return reinterpret_cast<const StreamMessage_StreamContentNack*>(
               &_StreamMessage_StreamContentNack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(StreamMessage_StreamContentNack& a, StreamMessage_StreamContentNack& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamMessage_StreamContentNack* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamMessage_StreamContentNack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamMessage_StreamContentNack* New() const final {
    return new StreamMessage_StreamContentNack();
  }

  StreamMessage_StreamContentNack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamMessage_StreamContentNack>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StreamMessage_StreamContentNack& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StreamMessage_StreamContentNack& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamMessage_StreamContentNack* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "media_message.StreamMessage.StreamContentNack";
  }
  protected:
  explicit StreamMessage_StreamContentNack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef StreamMessage_StreamContentNack_Ack Ack;

  // accessors -------------------------------------------------------

  enum : int {
    kNackSequenceNumberFieldNumber = 2,
    kAcksFieldNumber = 3,
    kSourceUserIDFieldNumber = 1,
  };
  // repeated uint64 nackSequenceNumber = 2;
  int nacksequencenumber_size() const;
  private:
  int _internal_nacksequencenumber_size() const;
  public:
  void clear_nacksequencenumber();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_nacksequencenumber(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_nacksequencenumber() const;
  void _internal_add_nacksequencenumber(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_nacksequencenumber();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 nacksequencenumber(int index) const;
  void set_nacksequencenumber(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_nacksequencenumber(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      nacksequencenumber() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_nacksequencenumber();

  // repeated .media_message.StreamMessage.StreamContentNack.Ack acks = 3;
  int acks_size() const;
  private:
  int _internal_acks_size() const;
  public:
  void clear_acks();
  ::media_message::StreamMessage_StreamContentNack_Ack* mutable_acks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::media_message::StreamMessage_StreamContentNack_Ack >*
      mutable_acks();
  private:
  const ::media_message::StreamMessage_StreamContentNack_Ack& _internal_acks(int index) const;
  ::media_message::StreamMessage_StreamContentNack_Ack* _internal_add_acks();
  public:
  const ::media_message::StreamMessage_StreamContentNack_Ack& acks(int index) const;
  ::media_message::StreamMessage_StreamContentNack_Ack* add_acks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::media_message::StreamMessage_StreamContentNack_Ack >&
      acks() const;

  // uint64 sourceUserID = 1;
  void clear_sourceuserid();
  ::PROTOBUF_NAMESPACE_ID::uint64 sourceuserid() const;
  void set_sourceuserid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sourceuserid() const;
  void _internal_set_sourceuserid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:media_message.StreamMessage.StreamContentNack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > nacksequencenumber_;
  mutable std::atomic<int> _nacksequencenumber_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::media_message::StreamMessage_StreamContentNack_Ack > acks_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sourceuserid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_media_2eproto;
};
// -------------------------------------------------------------------

class StreamMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:media_message.StreamMessage) */ {
 public:
  inline StreamMessage() : StreamMessage(nullptr) {}
  ~StreamMessage() override;
  explicit constexpr StreamMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamMessage(const StreamMessage& from);
  StreamMessage(StreamMessage&& from) noexcept
    : StreamMessage() {
    *this = ::std::move(from);
  }

  inline StreamMessage& operator=(const StreamMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamMessage& operator=(StreamMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamMessage& default_instance() {
    return *internal_default_instance();
  }
  enum PayloadCase {
    kStreamContent = 5,
    kStreamContentNack = 6,
    kStreamContentAck = 9,
    kJoin = 7,
    kJoinAck = 8,
    kIdrRequest = 10,
    PAYLOAD_NOT_SET = 0,
  };

  static inline const StreamMessage* internal_default_instance() {
    return reinterpret_cast<const StreamMessage*>(
               &_StreamMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(StreamMessage& a, StreamMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamMessage* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamMessage* New() const final {
    return new StreamMessage();
  }

  StreamMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StreamMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StreamMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "media_message.StreamMessage";
  }
  protected:
  explicit StreamMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef StreamMessage_Join Join;
  typedef StreamMessage_JoinAck JoinAck;
  typedef StreamMessage_IdrRequest IdrRequest;
  typedef StreamMessage_StreamContent StreamContent;
  typedef StreamMessage_StreamContentAck StreamContentAck;
  typedef StreamMessage_StreamContentNack StreamContentNack;

  // accessors -------------------------------------------------------

  enum : int {
    kConferenceIdFieldNumber = 1,
    kClientIdFieldNumber = 2,
    kTransportSeqNumFieldNumber = 3,
    kRetransmittedFieldNumber = 15,
    kStreamContentFieldNumber = 5,
    kStreamContentNackFieldNumber = 6,
    kStreamContentAckFieldNumber = 9,
    kJoinFieldNumber = 7,
    kJoinAckFieldNumber = 8,
    kIdrRequestFieldNumber = 10,
  };
  // uint64 conference_id = 1;
  void clear_conference_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 conference_id() const;
  void set_conference_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_conference_id() const;
  void _internal_set_conference_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 client_id = 2;
  void clear_client_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 client_id() const;
  void set_client_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_client_id() const;
  void _internal_set_client_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 transport_seq_num = 3;
  void clear_transport_seq_num();
  ::PROTOBUF_NAMESPACE_ID::uint64 transport_seq_num() const;
  void set_transport_seq_num(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_transport_seq_num() const;
  void _internal_set_transport_seq_num(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool retransmitted = 15;
  void clear_retransmitted();
  bool retransmitted() const;
  void set_retransmitted(bool value);
  private:
  bool _internal_retransmitted() const;
  void _internal_set_retransmitted(bool value);
  public:

  // .media_message.StreamMessage.StreamContent stream_content = 5;
  bool has_stream_content() const;
  private:
  bool _internal_has_stream_content() const;
  public:
  void clear_stream_content();
  const ::media_message::StreamMessage_StreamContent& stream_content() const;
  PROTOBUF_MUST_USE_RESULT ::media_message::StreamMessage_StreamContent* release_stream_content();
  ::media_message::StreamMessage_StreamContent* mutable_stream_content();
  void set_allocated_stream_content(::media_message::StreamMessage_StreamContent* stream_content);
  private:
  const ::media_message::StreamMessage_StreamContent& _internal_stream_content() const;
  ::media_message::StreamMessage_StreamContent* _internal_mutable_stream_content();
  public:
  void unsafe_arena_set_allocated_stream_content(
      ::media_message::StreamMessage_StreamContent* stream_content);
  ::media_message::StreamMessage_StreamContent* unsafe_arena_release_stream_content();

  // .media_message.StreamMessage.StreamContentNack stream_content_nack = 6;
  bool has_stream_content_nack() const;
  private:
  bool _internal_has_stream_content_nack() const;
  public:
  void clear_stream_content_nack();
  const ::media_message::StreamMessage_StreamContentNack& stream_content_nack() const;
  PROTOBUF_MUST_USE_RESULT ::media_message::StreamMessage_StreamContentNack* release_stream_content_nack();
  ::media_message::StreamMessage_StreamContentNack* mutable_stream_content_nack();
  void set_allocated_stream_content_nack(::media_message::StreamMessage_StreamContentNack* stream_content_nack);
  private:
  const ::media_message::StreamMessage_StreamContentNack& _internal_stream_content_nack() const;
  ::media_message::StreamMessage_StreamContentNack* _internal_mutable_stream_content_nack();
  public:
  void unsafe_arena_set_allocated_stream_content_nack(
      ::media_message::StreamMessage_StreamContentNack* stream_content_nack);
  ::media_message::StreamMessage_StreamContentNack* unsafe_arena_release_stream_content_nack();

  // .media_message.StreamMessage.StreamContentAck stream_content_ack = 9;
  bool has_stream_content_ack() const;
  private:
  bool _internal_has_stream_content_ack() const;
  public:
  void clear_stream_content_ack();
  const ::media_message::StreamMessage_StreamContentAck& stream_content_ack() const;
  PROTOBUF_MUST_USE_RESULT ::media_message::StreamMessage_StreamContentAck* release_stream_content_ack();
  ::media_message::StreamMessage_StreamContentAck* mutable_stream_content_ack();
  void set_allocated_stream_content_ack(::media_message::StreamMessage_StreamContentAck* stream_content_ack);
  private:
  const ::media_message::StreamMessage_StreamContentAck& _internal_stream_content_ack() const;
  ::media_message::StreamMessage_StreamContentAck* _internal_mutable_stream_content_ack();
  public:
  void unsafe_arena_set_allocated_stream_content_ack(
      ::media_message::StreamMessage_StreamContentAck* stream_content_ack);
  ::media_message::StreamMessage_StreamContentAck* unsafe_arena_release_stream_content_ack();

  // .media_message.StreamMessage.Join join = 7;
  bool has_join() const;
  private:
  bool _internal_has_join() const;
  public:
  void clear_join();
  const ::media_message::StreamMessage_Join& join() const;
  PROTOBUF_MUST_USE_RESULT ::media_message::StreamMessage_Join* release_join();
  ::media_message::StreamMessage_Join* mutable_join();
  void set_allocated_join(::media_message::StreamMessage_Join* join);
  private:
  const ::media_message::StreamMessage_Join& _internal_join() const;
  ::media_message::StreamMessage_Join* _internal_mutable_join();
  public:
  void unsafe_arena_set_allocated_join(
      ::media_message::StreamMessage_Join* join);
  ::media_message::StreamMessage_Join* unsafe_arena_release_join();

  // .media_message.StreamMessage.JoinAck join_ack = 8;
  bool has_join_ack() const;
  private:
  bool _internal_has_join_ack() const;
  public:
  void clear_join_ack();
  const ::media_message::StreamMessage_JoinAck& join_ack() const;
  PROTOBUF_MUST_USE_RESULT ::media_message::StreamMessage_JoinAck* release_join_ack();
  ::media_message::StreamMessage_JoinAck* mutable_join_ack();
  void set_allocated_join_ack(::media_message::StreamMessage_JoinAck* join_ack);
  private:
  const ::media_message::StreamMessage_JoinAck& _internal_join_ack() const;
  ::media_message::StreamMessage_JoinAck* _internal_mutable_join_ack();
  public:
  void unsafe_arena_set_allocated_join_ack(
      ::media_message::StreamMessage_JoinAck* join_ack);
  ::media_message::StreamMessage_JoinAck* unsafe_arena_release_join_ack();

  // .media_message.StreamMessage.IdrRequest idr_request = 10;
  bool has_idr_request() const;
  private:
  bool _internal_has_idr_request() const;
  public:
  void clear_idr_request();
  const ::media_message::StreamMessage_IdrRequest& idr_request() const;
  PROTOBUF_MUST_USE_RESULT ::media_message::StreamMessage_IdrRequest* release_idr_request();
  ::media_message::StreamMessage_IdrRequest* mutable_idr_request();
  void set_allocated_idr_request(::media_message::StreamMessage_IdrRequest* idr_request);
  private:
  const ::media_message::StreamMessage_IdrRequest& _internal_idr_request() const;
  ::media_message::StreamMessage_IdrRequest* _internal_mutable_idr_request();
  public:
  void unsafe_arena_set_allocated_idr_request(
      ::media_message::StreamMessage_IdrRequest* idr_request);
  ::media_message::StreamMessage_IdrRequest* unsafe_arena_release_idr_request();

  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:media_message.StreamMessage)
 private:
  class _Internal;
  void set_has_stream_content();
  void set_has_stream_content_nack();
  void set_has_stream_content_ack();
  void set_has_join();
  void set_has_join_ack();
  void set_has_idr_request();

  inline bool has_payload() const;
  inline void clear_has_payload();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 conference_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 client_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 transport_seq_num_;
  bool retransmitted_;
  union PayloadUnion {
    constexpr PayloadUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::media_message::StreamMessage_StreamContent* stream_content_;
    ::media_message::StreamMessage_StreamContentNack* stream_content_nack_;
    ::media_message::StreamMessage_StreamContentAck* stream_content_ack_;
    ::media_message::StreamMessage_Join* join_;
    ::media_message::StreamMessage_JoinAck* join_ack_;
    ::media_message::StreamMessage_IdrRequest* idr_request_;
  } payload_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_media_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MediaDataHeader_Audio

// float audioEnergyLevel = 1;
inline void MediaDataHeader_Audio::clear_audioenergylevel() {
  audioenergylevel_ = 0;
}
inline float MediaDataHeader_Audio::_internal_audioenergylevel() const {
  return audioenergylevel_;
}
inline float MediaDataHeader_Audio::audioenergylevel() const {
  // @@protoc_insertion_point(field_get:media_message.MediaDataHeader.Audio.audioEnergyLevel)
  return _internal_audioenergylevel();
}
inline void MediaDataHeader_Audio::_internal_set_audioenergylevel(float value) {
  
  audioenergylevel_ = value;
}
inline void MediaDataHeader_Audio::set_audioenergylevel(float value) {
  _internal_set_audioenergylevel(value);
  // @@protoc_insertion_point(field_set:media_message.MediaDataHeader.Audio.audioEnergyLevel)
}

// -------------------------------------------------------------------

// MediaDataHeader_Video

// .media_message.MediaDataHeader.VideoFrameType marker = 1;
inline void MediaDataHeader_Video::clear_marker() {
  marker_ = 0;
}
inline ::media_message::MediaDataHeader_VideoFrameType MediaDataHeader_Video::_internal_marker() const {
  return static_cast< ::media_message::MediaDataHeader_VideoFrameType >(marker_);
}
inline ::media_message::MediaDataHeader_VideoFrameType MediaDataHeader_Video::marker() const {
  // @@protoc_insertion_point(field_get:media_message.MediaDataHeader.Video.marker)
  return _internal_marker();
}
inline void MediaDataHeader_Video::_internal_set_marker(::media_message::MediaDataHeader_VideoFrameType value) {
  
  marker_ = value;
}
inline void MediaDataHeader_Video::set_marker(::media_message::MediaDataHeader_VideoFrameType value) {
  _internal_set_marker(value);
  // @@protoc_insertion_point(field_set:media_message.MediaDataHeader.Video.marker)
}

// bool intraFrame = 2;
inline void MediaDataHeader_Video::clear_intraframe() {
  intraframe_ = false;
}
inline bool MediaDataHeader_Video::_internal_intraframe() const {
  return intraframe_;
}
inline bool MediaDataHeader_Video::intraframe() const {
  // @@protoc_insertion_point(field_get:media_message.MediaDataHeader.Video.intraFrame)
  return _internal_intraframe();
}
inline void MediaDataHeader_Video::_internal_set_intraframe(bool value) {
  
  intraframe_ = value;
}
inline void MediaDataHeader_Video::set_intraframe(bool value) {
  _internal_set_intraframe(value);
  // @@protoc_insertion_point(field_set:media_message.MediaDataHeader.Video.intraFrame)
}

// bool discardable = 3;
inline void MediaDataHeader_Video::clear_discardable() {
  discardable_ = false;
}
inline bool MediaDataHeader_Video::_internal_discardable() const {
  return discardable_;
}
inline bool MediaDataHeader_Video::discardable() const {
  // @@protoc_insertion_point(field_get:media_message.MediaDataHeader.Video.discardable)
  return _internal_discardable();
}
inline void MediaDataHeader_Video::_internal_set_discardable(bool value) {
  
  discardable_ = value;
}
inline void MediaDataHeader_Video::set_discardable(bool value) {
  _internal_set_discardable(value);
  // @@protoc_insertion_point(field_set:media_message.MediaDataHeader.Video.discardable)
}

// uint32 spatialLayerId = 4;
inline void MediaDataHeader_Video::clear_spatiallayerid() {
  spatiallayerid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MediaDataHeader_Video::_internal_spatiallayerid() const {
  return spatiallayerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MediaDataHeader_Video::spatiallayerid() const {
  // @@protoc_insertion_point(field_get:media_message.MediaDataHeader.Video.spatialLayerId)
  return _internal_spatiallayerid();
}
inline void MediaDataHeader_Video::_internal_set_spatiallayerid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  spatiallayerid_ = value;
}
inline void MediaDataHeader_Video::set_spatiallayerid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_spatiallayerid(value);
  // @@protoc_insertion_point(field_set:media_message.MediaDataHeader.Video.spatialLayerId)
}

// uint32 temporalLayerId = 5;
inline void MediaDataHeader_Video::clear_temporallayerid() {
  temporallayerid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MediaDataHeader_Video::_internal_temporallayerid() const {
  return temporallayerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MediaDataHeader_Video::temporallayerid() const {
  // @@protoc_insertion_point(field_get:media_message.MediaDataHeader.Video.temporalLayerId)
  return _internal_temporallayerid();
}
inline void MediaDataHeader_Video::_internal_set_temporallayerid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  temporallayerid_ = value;
}
inline void MediaDataHeader_Video::set_temporallayerid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_temporallayerid(value);
  // @@protoc_insertion_point(field_set:media_message.MediaDataHeader.Video.temporalLayerId)
}

// -------------------------------------------------------------------

// MediaDataHeader

// .media_message.MediaType mediaType = 1;
inline void MediaDataHeader::clear_mediatype() {
  mediatype_ = 0;
}
inline ::media_message::MediaType MediaDataHeader::_internal_mediatype() const {
  return static_cast< ::media_message::MediaType >(mediatype_);
}
inline ::media_message::MediaType MediaDataHeader::mediatype() const {
  // @@protoc_insertion_point(field_get:media_message.MediaDataHeader.mediaType)
  return _internal_mediatype();
}
inline void MediaDataHeader::_internal_set_mediatype(::media_message::MediaType value) {
  
  mediatype_ = value;
}
inline void MediaDataHeader::set_mediatype(::media_message::MediaType value) {
  _internal_set_mediatype(value);
  // @@protoc_insertion_point(field_set:media_message.MediaDataHeader.mediaType)
}

// uint64 sourceID = 2;
inline void MediaDataHeader::clear_sourceid() {
  sourceid_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MediaDataHeader::_internal_sourceid() const {
  return sourceid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MediaDataHeader::sourceid() const {
  // @@protoc_insertion_point(field_get:media_message.MediaDataHeader.sourceID)
  return _internal_sourceid();
}
inline void MediaDataHeader::_internal_set_sourceid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  sourceid_ = value;
}
inline void MediaDataHeader::set_sourceid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sourceid(value);
  // @@protoc_insertion_point(field_set:media_message.MediaDataHeader.sourceID)
}

// fixed64 sourceRecordTime = 3;
inline void MediaDataHeader::clear_sourcerecordtime() {
  sourcerecordtime_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MediaDataHeader::_internal_sourcerecordtime() const {
  return sourcerecordtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MediaDataHeader::sourcerecordtime() const {
  // @@protoc_insertion_point(field_get:media_message.MediaDataHeader.sourceRecordTime)
  return _internal_sourcerecordtime();
}
inline void MediaDataHeader::_internal_set_sourcerecordtime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  sourcerecordtime_ = value;
}
inline void MediaDataHeader::set_sourcerecordtime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sourcerecordtime(value);
  // @@protoc_insertion_point(field_set:media_message.MediaDataHeader.sourceRecordTime)
}

// uint64 sequenceNumber = 4;
inline void MediaDataHeader::clear_sequencenumber() {
  sequencenumber_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MediaDataHeader::_internal_sequencenumber() const {
  return sequencenumber_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MediaDataHeader::sequencenumber() const {
  // @@protoc_insertion_point(field_get:media_message.MediaDataHeader.sequenceNumber)
  return _internal_sequencenumber();
}
inline void MediaDataHeader::_internal_set_sequencenumber(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  sequencenumber_ = value;
}
inline void MediaDataHeader::set_sequencenumber(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sequencenumber(value);
  // @@protoc_insertion_point(field_set:media_message.MediaDataHeader.sequenceNumber)
}

// .media_message.PacketizeType packetizeType = 9;
inline void MediaDataHeader::clear_packetizetype() {
  packetizetype_ = 0;
}
inline ::media_message::PacketizeType MediaDataHeader::_internal_packetizetype() const {
  return static_cast< ::media_message::PacketizeType >(packetizetype_);
}
inline ::media_message::PacketizeType MediaDataHeader::packetizetype() const {
  // @@protoc_insertion_point(field_get:media_message.MediaDataHeader.packetizeType)
  return _internal_packetizetype();
}
inline void MediaDataHeader::_internal_set_packetizetype(::media_message::PacketizeType value) {
  
  packetizetype_ = value;
}
inline void MediaDataHeader::set_packetizetype(::media_message::PacketizeType value) {
  _internal_set_packetizetype(value);
  // @@protoc_insertion_point(field_set:media_message.MediaDataHeader.packetizeType)
}

// uint64 packetNumber = 10;
inline void MediaDataHeader::clear_packetnumber() {
  packetnumber_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MediaDataHeader::_internal_packetnumber() const {
  return packetnumber_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MediaDataHeader::packetnumber() const {
  // @@protoc_insertion_point(field_get:media_message.MediaDataHeader.packetNumber)
  return _internal_packetnumber();
}
inline void MediaDataHeader::_internal_set_packetnumber(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  packetnumber_ = value;
}
inline void MediaDataHeader::set_packetnumber(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_packetnumber(value);
  // @@protoc_insertion_point(field_set:media_message.MediaDataHeader.packetNumber)
}

// uint64 packetCount = 11;
inline void MediaDataHeader::clear_packetcount() {
  packetcount_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MediaDataHeader::_internal_packetcount() const {
  return packetcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MediaDataHeader::packetcount() const {
  // @@protoc_insertion_point(field_get:media_message.MediaDataHeader.packetCount)
  return _internal_packetcount();
}
inline void MediaDataHeader::_internal_set_packetcount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  packetcount_ = value;
}
inline void MediaDataHeader::set_packetcount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_packetcount(value);
  // @@protoc_insertion_point(field_set:media_message.MediaDataHeader.packetCount)
}

// uint64 frameSize = 12;
inline void MediaDataHeader::clear_framesize() {
  framesize_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MediaDataHeader::_internal_framesize() const {
  return framesize_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MediaDataHeader::framesize() const {
  // @@protoc_insertion_point(field_get:media_message.MediaDataHeader.frameSize)
  return _internal_framesize();
}
inline void MediaDataHeader::_internal_set_framesize(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  framesize_ = value;
}
inline void MediaDataHeader::set_framesize(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_framesize(value);
  // @@protoc_insertion_point(field_set:media_message.MediaDataHeader.frameSize)
}

// uint32 priorityLevel = 13;
inline void MediaDataHeader::clear_prioritylevel() {
  prioritylevel_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MediaDataHeader::_internal_prioritylevel() const {
  return prioritylevel_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MediaDataHeader::prioritylevel() const {
  // @@protoc_insertion_point(field_get:media_message.MediaDataHeader.priorityLevel)
  return _internal_prioritylevel();
}
inline void MediaDataHeader::_internal_set_prioritylevel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  prioritylevel_ = value;
}
inline void MediaDataHeader::set_prioritylevel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_prioritylevel(value);
  // @@protoc_insertion_point(field_set:media_message.MediaDataHeader.priorityLevel)
}

// .media_message.MediaDataHeader.Audio audio_header = 7;
inline bool MediaDataHeader::_internal_has_audio_header() const {
  return header_case() == kAudioHeader;
}
inline bool MediaDataHeader::has_audio_header() const {
  return _internal_has_audio_header();
}
inline void MediaDataHeader::set_has_audio_header() {
  _oneof_case_[0] = kAudioHeader;
}
inline void MediaDataHeader::clear_audio_header() {
  if (_internal_has_audio_header()) {
    if (GetArenaForAllocation() == nullptr) {
      delete header_.audio_header_;
    }
    clear_has_header();
  }
}
inline ::media_message::MediaDataHeader_Audio* MediaDataHeader::release_audio_header() {
  // @@protoc_insertion_point(field_release:media_message.MediaDataHeader.audio_header)
  if (_internal_has_audio_header()) {
    clear_has_header();
      ::media_message::MediaDataHeader_Audio* temp = header_.audio_header_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    header_.audio_header_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::media_message::MediaDataHeader_Audio& MediaDataHeader::_internal_audio_header() const {
  return _internal_has_audio_header()
      ? *header_.audio_header_
      : reinterpret_cast< ::media_message::MediaDataHeader_Audio&>(::media_message::_MediaDataHeader_Audio_default_instance_);
}
inline const ::media_message::MediaDataHeader_Audio& MediaDataHeader::audio_header() const {
  // @@protoc_insertion_point(field_get:media_message.MediaDataHeader.audio_header)
  return _internal_audio_header();
}
inline ::media_message::MediaDataHeader_Audio* MediaDataHeader::unsafe_arena_release_audio_header() {
  // @@protoc_insertion_point(field_unsafe_arena_release:media_message.MediaDataHeader.audio_header)
  if (_internal_has_audio_header()) {
    clear_has_header();
    ::media_message::MediaDataHeader_Audio* temp = header_.audio_header_;
    header_.audio_header_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MediaDataHeader::unsafe_arena_set_allocated_audio_header(::media_message::MediaDataHeader_Audio* audio_header) {
  clear_header();
  if (audio_header) {
    set_has_audio_header();
    header_.audio_header_ = audio_header;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:media_message.MediaDataHeader.audio_header)
}
inline ::media_message::MediaDataHeader_Audio* MediaDataHeader::_internal_mutable_audio_header() {
  if (!_internal_has_audio_header()) {
    clear_header();
    set_has_audio_header();
    header_.audio_header_ = CreateMaybeMessage< ::media_message::MediaDataHeader_Audio >(GetArenaForAllocation());
  }
  return header_.audio_header_;
}
inline ::media_message::MediaDataHeader_Audio* MediaDataHeader::mutable_audio_header() {
  ::media_message::MediaDataHeader_Audio* _msg = _internal_mutable_audio_header();
  // @@protoc_insertion_point(field_mutable:media_message.MediaDataHeader.audio_header)
  return _msg;
}

// .media_message.MediaDataHeader.Video video_header = 8;
inline bool MediaDataHeader::_internal_has_video_header() const {
  return header_case() == kVideoHeader;
}
inline bool MediaDataHeader::has_video_header() const {
  return _internal_has_video_header();
}
inline void MediaDataHeader::set_has_video_header() {
  _oneof_case_[0] = kVideoHeader;
}
inline void MediaDataHeader::clear_video_header() {
  if (_internal_has_video_header()) {
    if (GetArenaForAllocation() == nullptr) {
      delete header_.video_header_;
    }
    clear_has_header();
  }
}
inline ::media_message::MediaDataHeader_Video* MediaDataHeader::release_video_header() {
  // @@protoc_insertion_point(field_release:media_message.MediaDataHeader.video_header)
  if (_internal_has_video_header()) {
    clear_has_header();
      ::media_message::MediaDataHeader_Video* temp = header_.video_header_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    header_.video_header_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::media_message::MediaDataHeader_Video& MediaDataHeader::_internal_video_header() const {
  return _internal_has_video_header()
      ? *header_.video_header_
      : reinterpret_cast< ::media_message::MediaDataHeader_Video&>(::media_message::_MediaDataHeader_Video_default_instance_);
}
inline const ::media_message::MediaDataHeader_Video& MediaDataHeader::video_header() const {
  // @@protoc_insertion_point(field_get:media_message.MediaDataHeader.video_header)
  return _internal_video_header();
}
inline ::media_message::MediaDataHeader_Video* MediaDataHeader::unsafe_arena_release_video_header() {
  // @@protoc_insertion_point(field_unsafe_arena_release:media_message.MediaDataHeader.video_header)
  if (_internal_has_video_header()) {
    clear_has_header();
    ::media_message::MediaDataHeader_Video* temp = header_.video_header_;
    header_.video_header_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MediaDataHeader::unsafe_arena_set_allocated_video_header(::media_message::MediaDataHeader_Video* video_header) {
  clear_header();
  if (video_header) {
    set_has_video_header();
    header_.video_header_ = video_header;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:media_message.MediaDataHeader.video_header)
}
inline ::media_message::MediaDataHeader_Video* MediaDataHeader::_internal_mutable_video_header() {
  if (!_internal_has_video_header()) {
    clear_header();
    set_has_video_header();
    header_.video_header_ = CreateMaybeMessage< ::media_message::MediaDataHeader_Video >(GetArenaForAllocation());
  }
  return header_.video_header_;
}
inline ::media_message::MediaDataHeader_Video* MediaDataHeader::mutable_video_header() {
  ::media_message::MediaDataHeader_Video* _msg = _internal_mutable_video_header();
  // @@protoc_insertion_point(field_mutable:media_message.MediaDataHeader.video_header)
  return _msg;
}

inline bool MediaDataHeader::has_header() const {
  return header_case() != HEADER_NOT_SET;
}
inline void MediaDataHeader::clear_has_header() {
  _oneof_case_[0] = HEADER_NOT_SET;
}
inline MediaDataHeader::HeaderCase MediaDataHeader::header_case() const {
  return MediaDataHeader::HeaderCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// MediaData

// .media_message.MediaDataHeader header = 1;
inline bool MediaData::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool MediaData::has_header() const {
  return _internal_has_header();
}
inline void MediaData::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::media_message::MediaDataHeader& MediaData::_internal_header() const {
  const ::media_message::MediaDataHeader* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::media_message::MediaDataHeader&>(
      ::media_message::_MediaDataHeader_default_instance_);
}
inline const ::media_message::MediaDataHeader& MediaData::header() const {
  // @@protoc_insertion_point(field_get:media_message.MediaData.header)
  return _internal_header();
}
inline void MediaData::unsafe_arena_set_allocated_header(
    ::media_message::MediaDataHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:media_message.MediaData.header)
}
inline ::media_message::MediaDataHeader* MediaData::release_header() {
  
  ::media_message::MediaDataHeader* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::media_message::MediaDataHeader* MediaData::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:media_message.MediaData.header)
  
  ::media_message::MediaDataHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::media_message::MediaDataHeader* MediaData::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::media_message::MediaDataHeader>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::media_message::MediaDataHeader* MediaData::mutable_header() {
  ::media_message::MediaDataHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:media_message.MediaData.header)
  return _msg;
}
inline void MediaData::set_allocated_header(::media_message::MediaDataHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::media_message::MediaDataHeader>::GetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:media_message.MediaData.header)
}

// bytes encryptedMediaData = 2;
inline void MediaData::clear_encryptedmediadata() {
  encryptedmediadata_.ClearToEmpty();
}
inline const std::string& MediaData::encryptedmediadata() const {
  // @@protoc_insertion_point(field_get:media_message.MediaData.encryptedMediaData)
  return _internal_encryptedmediadata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MediaData::set_encryptedmediadata(ArgT0&& arg0, ArgT... args) {
 
 encryptedmediadata_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:media_message.MediaData.encryptedMediaData)
}
inline std::string* MediaData::mutable_encryptedmediadata() {
  std::string* _s = _internal_mutable_encryptedmediadata();
  // @@protoc_insertion_point(field_mutable:media_message.MediaData.encryptedMediaData)
  return _s;
}
inline const std::string& MediaData::_internal_encryptedmediadata() const {
  return encryptedmediadata_.Get();
}
inline void MediaData::_internal_set_encryptedmediadata(const std::string& value) {
  
  encryptedmediadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MediaData::_internal_mutable_encryptedmediadata() {
  
  return encryptedmediadata_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MediaData::release_encryptedmediadata() {
  // @@protoc_insertion_point(field_release:media_message.MediaData.encryptedMediaData)
  return encryptedmediadata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MediaData::set_allocated_encryptedmediadata(std::string* encryptedmediadata) {
  if (encryptedmediadata != nullptr) {
    
  } else {
    
  }
  encryptedmediadata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), encryptedmediadata,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:media_message.MediaData.encryptedMediaData)
}

// -------------------------------------------------------------------

// StreamMessage_Join

// bool echo = 1;
inline void StreamMessage_Join::clear_echo() {
  echo_ = false;
}
inline bool StreamMessage_Join::_internal_echo() const {
  return echo_;
}
inline bool StreamMessage_Join::echo() const {
  // @@protoc_insertion_point(field_get:media_message.StreamMessage.Join.echo)
  return _internal_echo();
}
inline void StreamMessage_Join::_internal_set_echo(bool value) {
  
  echo_ = value;
}
inline void StreamMessage_Join::set_echo(bool value) {
  _internal_set_echo(value);
  // @@protoc_insertion_point(field_set:media_message.StreamMessage.Join.echo)
}

// -------------------------------------------------------------------

// StreamMessage_JoinAck

// -------------------------------------------------------------------

// StreamMessage_IdrRequest

// uint64 client_id = 1;
inline void StreamMessage_IdrRequest::clear_client_id() {
  client_id_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StreamMessage_IdrRequest::_internal_client_id() const {
  return client_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StreamMessage_IdrRequest::client_id() const {
  // @@protoc_insertion_point(field_get:media_message.StreamMessage.IdrRequest.client_id)
  return _internal_client_id();
}
inline void StreamMessage_IdrRequest::_internal_set_client_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  client_id_ = value;
}
inline void StreamMessage_IdrRequest::set_client_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:media_message.StreamMessage.IdrRequest.client_id)
}

// uint64 source_id = 2;
inline void StreamMessage_IdrRequest::clear_source_id() {
  source_id_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StreamMessage_IdrRequest::_internal_source_id() const {
  return source_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StreamMessage_IdrRequest::source_id() const {
  // @@protoc_insertion_point(field_get:media_message.StreamMessage.IdrRequest.source_id)
  return _internal_source_id();
}
inline void StreamMessage_IdrRequest::_internal_set_source_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  source_id_ = value;
}
inline void StreamMessage_IdrRequest::set_source_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_source_id(value);
  // @@protoc_insertion_point(field_set:media_message.StreamMessage.IdrRequest.source_id)
}

// uint64 source_timestamp = 3;
inline void StreamMessage_IdrRequest::clear_source_timestamp() {
  source_timestamp_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StreamMessage_IdrRequest::_internal_source_timestamp() const {
  return source_timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StreamMessage_IdrRequest::source_timestamp() const {
  // @@protoc_insertion_point(field_get:media_message.StreamMessage.IdrRequest.source_timestamp)
  return _internal_source_timestamp();
}
inline void StreamMessage_IdrRequest::_internal_set_source_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  source_timestamp_ = value;
}
inline void StreamMessage_IdrRequest::set_source_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_source_timestamp(value);
  // @@protoc_insertion_point(field_set:media_message.StreamMessage.IdrRequest.source_timestamp)
}

// -------------------------------------------------------------------

// StreamMessage_StreamContent

// repeated .media_message.MediaData mediaData = 1;
inline int StreamMessage_StreamContent::_internal_mediadata_size() const {
  return mediadata_.size();
}
inline int StreamMessage_StreamContent::mediadata_size() const {
  return _internal_mediadata_size();
}
inline void StreamMessage_StreamContent::clear_mediadata() {
  mediadata_.Clear();
}
inline ::media_message::MediaData* StreamMessage_StreamContent::mutable_mediadata(int index) {
  // @@protoc_insertion_point(field_mutable:media_message.StreamMessage.StreamContent.mediaData)
  return mediadata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::media_message::MediaData >*
StreamMessage_StreamContent::mutable_mediadata() {
  // @@protoc_insertion_point(field_mutable_list:media_message.StreamMessage.StreamContent.mediaData)
  return &mediadata_;
}
inline const ::media_message::MediaData& StreamMessage_StreamContent::_internal_mediadata(int index) const {
  return mediadata_.Get(index);
}
inline const ::media_message::MediaData& StreamMessage_StreamContent::mediadata(int index) const {
  // @@protoc_insertion_point(field_get:media_message.StreamMessage.StreamContent.mediaData)
  return _internal_mediadata(index);
}
inline ::media_message::MediaData* StreamMessage_StreamContent::_internal_add_mediadata() {
  return mediadata_.Add();
}
inline ::media_message::MediaData* StreamMessage_StreamContent::add_mediadata() {
  ::media_message::MediaData* _add = _internal_add_mediadata();
  // @@protoc_insertion_point(field_add:media_message.StreamMessage.StreamContent.mediaData)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::media_message::MediaData >&
StreamMessage_StreamContent::mediadata() const {
  // @@protoc_insertion_point(field_list:media_message.StreamMessage.StreamContent.mediaData)
  return mediadata_;
}

// -------------------------------------------------------------------

// StreamMessage_StreamContentAck

// uint64 stream_seq_num = 1;
inline void StreamMessage_StreamContentAck::clear_stream_seq_num() {
  stream_seq_num_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StreamMessage_StreamContentAck::_internal_stream_seq_num() const {
  return stream_seq_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StreamMessage_StreamContentAck::stream_seq_num() const {
  // @@protoc_insertion_point(field_get:media_message.StreamMessage.StreamContentAck.stream_seq_num)
  return _internal_stream_seq_num();
}
inline void StreamMessage_StreamContentAck::_internal_set_stream_seq_num(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  stream_seq_num_ = value;
}
inline void StreamMessage_StreamContentAck::set_stream_seq_num(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_stream_seq_num(value);
  // @@protoc_insertion_point(field_set:media_message.StreamMessage.StreamContentAck.stream_seq_num)
}

// -------------------------------------------------------------------

// StreamMessage_StreamContentNack_Ack

// uint64 sequenceNumber = 1;
inline void StreamMessage_StreamContentNack_Ack::clear_sequencenumber() {
  sequencenumber_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StreamMessage_StreamContentNack_Ack::_internal_sequencenumber() const {
  return sequencenumber_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StreamMessage_StreamContentNack_Ack::sequencenumber() const {
  // @@protoc_insertion_point(field_get:media_message.StreamMessage.StreamContentNack.Ack.sequenceNumber)
  return _internal_sequencenumber();
}
inline void StreamMessage_StreamContentNack_Ack::_internal_set_sequencenumber(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  sequencenumber_ = value;
}
inline void StreamMessage_StreamContentNack_Ack::set_sequencenumber(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sequencenumber(value);
  // @@protoc_insertion_point(field_set:media_message.StreamMessage.StreamContentNack.Ack.sequenceNumber)
}

// fixed64 senderTimeMs = 2;
inline void StreamMessage_StreamContentNack_Ack::clear_sendertimems() {
  sendertimems_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StreamMessage_StreamContentNack_Ack::_internal_sendertimems() const {
  return sendertimems_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StreamMessage_StreamContentNack_Ack::sendertimems() const {
  // @@protoc_insertion_point(field_get:media_message.StreamMessage.StreamContentNack.Ack.senderTimeMs)
  return _internal_sendertimems();
}
inline void StreamMessage_StreamContentNack_Ack::_internal_set_sendertimems(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  sendertimems_ = value;
}
inline void StreamMessage_StreamContentNack_Ack::set_sendertimems(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sendertimems(value);
  // @@protoc_insertion_point(field_set:media_message.StreamMessage.StreamContentNack.Ack.senderTimeMs)
}

// fixed64 receiverTimeMs = 3;
inline void StreamMessage_StreamContentNack_Ack::clear_receivertimems() {
  receivertimems_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StreamMessage_StreamContentNack_Ack::_internal_receivertimems() const {
  return receivertimems_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StreamMessage_StreamContentNack_Ack::receivertimems() const {
  // @@protoc_insertion_point(field_get:media_message.StreamMessage.StreamContentNack.Ack.receiverTimeMs)
  return _internal_receivertimems();
}
inline void StreamMessage_StreamContentNack_Ack::_internal_set_receivertimems(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  receivertimems_ = value;
}
inline void StreamMessage_StreamContentNack_Ack::set_receivertimems(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_receivertimems(value);
  // @@protoc_insertion_point(field_set:media_message.StreamMessage.StreamContentNack.Ack.receiverTimeMs)
}

// uint32 packetSize = 4;
inline void StreamMessage_StreamContentNack_Ack::clear_packetsize() {
  packetsize_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StreamMessage_StreamContentNack_Ack::_internal_packetsize() const {
  return packetsize_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StreamMessage_StreamContentNack_Ack::packetsize() const {
  // @@protoc_insertion_point(field_get:media_message.StreamMessage.StreamContentNack.Ack.packetSize)
  return _internal_packetsize();
}
inline void StreamMessage_StreamContentNack_Ack::_internal_set_packetsize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  packetsize_ = value;
}
inline void StreamMessage_StreamContentNack_Ack::set_packetsize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_packetsize(value);
  // @@protoc_insertion_point(field_set:media_message.StreamMessage.StreamContentNack.Ack.packetSize)
}

// .media_message.MediaType mediaType = 5;
inline void StreamMessage_StreamContentNack_Ack::clear_mediatype() {
  mediatype_ = 0;
}
inline ::media_message::MediaType StreamMessage_StreamContentNack_Ack::_internal_mediatype() const {
  return static_cast< ::media_message::MediaType >(mediatype_);
}
inline ::media_message::MediaType StreamMessage_StreamContentNack_Ack::mediatype() const {
  // @@protoc_insertion_point(field_get:media_message.StreamMessage.StreamContentNack.Ack.mediaType)
  return _internal_mediatype();
}
inline void StreamMessage_StreamContentNack_Ack::_internal_set_mediatype(::media_message::MediaType value) {
  
  mediatype_ = value;
}
inline void StreamMessage_StreamContentNack_Ack::set_mediatype(::media_message::MediaType value) {
  _internal_set_mediatype(value);
  // @@protoc_insertion_point(field_set:media_message.StreamMessage.StreamContentNack.Ack.mediaType)
}

// -------------------------------------------------------------------

// StreamMessage_StreamContentNack

// uint64 sourceUserID = 1;
inline void StreamMessage_StreamContentNack::clear_sourceuserid() {
  sourceuserid_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StreamMessage_StreamContentNack::_internal_sourceuserid() const {
  return sourceuserid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StreamMessage_StreamContentNack::sourceuserid() const {
  // @@protoc_insertion_point(field_get:media_message.StreamMessage.StreamContentNack.sourceUserID)
  return _internal_sourceuserid();
}
inline void StreamMessage_StreamContentNack::_internal_set_sourceuserid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  sourceuserid_ = value;
}
inline void StreamMessage_StreamContentNack::set_sourceuserid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sourceuserid(value);
  // @@protoc_insertion_point(field_set:media_message.StreamMessage.StreamContentNack.sourceUserID)
}

// repeated uint64 nackSequenceNumber = 2;
inline int StreamMessage_StreamContentNack::_internal_nacksequencenumber_size() const {
  return nacksequencenumber_.size();
}
inline int StreamMessage_StreamContentNack::nacksequencenumber_size() const {
  return _internal_nacksequencenumber_size();
}
inline void StreamMessage_StreamContentNack::clear_nacksequencenumber() {
  nacksequencenumber_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StreamMessage_StreamContentNack::_internal_nacksequencenumber(int index) const {
  return nacksequencenumber_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StreamMessage_StreamContentNack::nacksequencenumber(int index) const {
  // @@protoc_insertion_point(field_get:media_message.StreamMessage.StreamContentNack.nackSequenceNumber)
  return _internal_nacksequencenumber(index);
}
inline void StreamMessage_StreamContentNack::set_nacksequencenumber(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  nacksequencenumber_.Set(index, value);
  // @@protoc_insertion_point(field_set:media_message.StreamMessage.StreamContentNack.nackSequenceNumber)
}
inline void StreamMessage_StreamContentNack::_internal_add_nacksequencenumber(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  nacksequencenumber_.Add(value);
}
inline void StreamMessage_StreamContentNack::add_nacksequencenumber(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_nacksequencenumber(value);
  // @@protoc_insertion_point(field_add:media_message.StreamMessage.StreamContentNack.nackSequenceNumber)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
StreamMessage_StreamContentNack::_internal_nacksequencenumber() const {
  return nacksequencenumber_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
StreamMessage_StreamContentNack::nacksequencenumber() const {
  // @@protoc_insertion_point(field_list:media_message.StreamMessage.StreamContentNack.nackSequenceNumber)
  return _internal_nacksequencenumber();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
StreamMessage_StreamContentNack::_internal_mutable_nacksequencenumber() {
  return &nacksequencenumber_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
StreamMessage_StreamContentNack::mutable_nacksequencenumber() {
  // @@protoc_insertion_point(field_mutable_list:media_message.StreamMessage.StreamContentNack.nackSequenceNumber)
  return _internal_mutable_nacksequencenumber();
}

// repeated .media_message.StreamMessage.StreamContentNack.Ack acks = 3;
inline int StreamMessage_StreamContentNack::_internal_acks_size() const {
  return acks_.size();
}
inline int StreamMessage_StreamContentNack::acks_size() const {
  return _internal_acks_size();
}
inline void StreamMessage_StreamContentNack::clear_acks() {
  acks_.Clear();
}
inline ::media_message::StreamMessage_StreamContentNack_Ack* StreamMessage_StreamContentNack::mutable_acks(int index) {
  // @@protoc_insertion_point(field_mutable:media_message.StreamMessage.StreamContentNack.acks)
  return acks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::media_message::StreamMessage_StreamContentNack_Ack >*
StreamMessage_StreamContentNack::mutable_acks() {
  // @@protoc_insertion_point(field_mutable_list:media_message.StreamMessage.StreamContentNack.acks)
  return &acks_;
}
inline const ::media_message::StreamMessage_StreamContentNack_Ack& StreamMessage_StreamContentNack::_internal_acks(int index) const {
  return acks_.Get(index);
}
inline const ::media_message::StreamMessage_StreamContentNack_Ack& StreamMessage_StreamContentNack::acks(int index) const {
  // @@protoc_insertion_point(field_get:media_message.StreamMessage.StreamContentNack.acks)
  return _internal_acks(index);
}
inline ::media_message::StreamMessage_StreamContentNack_Ack* StreamMessage_StreamContentNack::_internal_add_acks() {
  return acks_.Add();
}
inline ::media_message::StreamMessage_StreamContentNack_Ack* StreamMessage_StreamContentNack::add_acks() {
  ::media_message::StreamMessage_StreamContentNack_Ack* _add = _internal_add_acks();
  // @@protoc_insertion_point(field_add:media_message.StreamMessage.StreamContentNack.acks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::media_message::StreamMessage_StreamContentNack_Ack >&
StreamMessage_StreamContentNack::acks() const {
  // @@protoc_insertion_point(field_list:media_message.StreamMessage.StreamContentNack.acks)
  return acks_;
}

// -------------------------------------------------------------------

// StreamMessage

// uint64 conference_id = 1;
inline void StreamMessage::clear_conference_id() {
  conference_id_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StreamMessage::_internal_conference_id() const {
  return conference_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StreamMessage::conference_id() const {
  // @@protoc_insertion_point(field_get:media_message.StreamMessage.conference_id)
  return _internal_conference_id();
}
inline void StreamMessage::_internal_set_conference_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  conference_id_ = value;
}
inline void StreamMessage::set_conference_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_conference_id(value);
  // @@protoc_insertion_point(field_set:media_message.StreamMessage.conference_id)
}

// uint64 client_id = 2;
inline void StreamMessage::clear_client_id() {
  client_id_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StreamMessage::_internal_client_id() const {
  return client_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StreamMessage::client_id() const {
  // @@protoc_insertion_point(field_get:media_message.StreamMessage.client_id)
  return _internal_client_id();
}
inline void StreamMessage::_internal_set_client_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  client_id_ = value;
}
inline void StreamMessage::set_client_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:media_message.StreamMessage.client_id)
}

// uint64 transport_seq_num = 3;
inline void StreamMessage::clear_transport_seq_num() {
  transport_seq_num_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StreamMessage::_internal_transport_seq_num() const {
  return transport_seq_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StreamMessage::transport_seq_num() const {
  // @@protoc_insertion_point(field_get:media_message.StreamMessage.transport_seq_num)
  return _internal_transport_seq_num();
}
inline void StreamMessage::_internal_set_transport_seq_num(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  transport_seq_num_ = value;
}
inline void StreamMessage::set_transport_seq_num(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_transport_seq_num(value);
  // @@protoc_insertion_point(field_set:media_message.StreamMessage.transport_seq_num)
}

// .media_message.StreamMessage.StreamContent stream_content = 5;
inline bool StreamMessage::_internal_has_stream_content() const {
  return payload_case() == kStreamContent;
}
inline bool StreamMessage::has_stream_content() const {
  return _internal_has_stream_content();
}
inline void StreamMessage::set_has_stream_content() {
  _oneof_case_[0] = kStreamContent;
}
inline void StreamMessage::clear_stream_content() {
  if (_internal_has_stream_content()) {
    if (GetArenaForAllocation() == nullptr) {
      delete payload_.stream_content_;
    }
    clear_has_payload();
  }
}
inline ::media_message::StreamMessage_StreamContent* StreamMessage::release_stream_content() {
  // @@protoc_insertion_point(field_release:media_message.StreamMessage.stream_content)
  if (_internal_has_stream_content()) {
    clear_has_payload();
      ::media_message::StreamMessage_StreamContent* temp = payload_.stream_content_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.stream_content_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::media_message::StreamMessage_StreamContent& StreamMessage::_internal_stream_content() const {
  return _internal_has_stream_content()
      ? *payload_.stream_content_
      : reinterpret_cast< ::media_message::StreamMessage_StreamContent&>(::media_message::_StreamMessage_StreamContent_default_instance_);
}
inline const ::media_message::StreamMessage_StreamContent& StreamMessage::stream_content() const {
  // @@protoc_insertion_point(field_get:media_message.StreamMessage.stream_content)
  return _internal_stream_content();
}
inline ::media_message::StreamMessage_StreamContent* StreamMessage::unsafe_arena_release_stream_content() {
  // @@protoc_insertion_point(field_unsafe_arena_release:media_message.StreamMessage.stream_content)
  if (_internal_has_stream_content()) {
    clear_has_payload();
    ::media_message::StreamMessage_StreamContent* temp = payload_.stream_content_;
    payload_.stream_content_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void StreamMessage::unsafe_arena_set_allocated_stream_content(::media_message::StreamMessage_StreamContent* stream_content) {
  clear_payload();
  if (stream_content) {
    set_has_stream_content();
    payload_.stream_content_ = stream_content;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:media_message.StreamMessage.stream_content)
}
inline ::media_message::StreamMessage_StreamContent* StreamMessage::_internal_mutable_stream_content() {
  if (!_internal_has_stream_content()) {
    clear_payload();
    set_has_stream_content();
    payload_.stream_content_ = CreateMaybeMessage< ::media_message::StreamMessage_StreamContent >(GetArenaForAllocation());
  }
  return payload_.stream_content_;
}
inline ::media_message::StreamMessage_StreamContent* StreamMessage::mutable_stream_content() {
  ::media_message::StreamMessage_StreamContent* _msg = _internal_mutable_stream_content();
  // @@protoc_insertion_point(field_mutable:media_message.StreamMessage.stream_content)
  return _msg;
}

// .media_message.StreamMessage.StreamContentNack stream_content_nack = 6;
inline bool StreamMessage::_internal_has_stream_content_nack() const {
  return payload_case() == kStreamContentNack;
}
inline bool StreamMessage::has_stream_content_nack() const {
  return _internal_has_stream_content_nack();
}
inline void StreamMessage::set_has_stream_content_nack() {
  _oneof_case_[0] = kStreamContentNack;
}
inline void StreamMessage::clear_stream_content_nack() {
  if (_internal_has_stream_content_nack()) {
    if (GetArenaForAllocation() == nullptr) {
      delete payload_.stream_content_nack_;
    }
    clear_has_payload();
  }
}
inline ::media_message::StreamMessage_StreamContentNack* StreamMessage::release_stream_content_nack() {
  // @@protoc_insertion_point(field_release:media_message.StreamMessage.stream_content_nack)
  if (_internal_has_stream_content_nack()) {
    clear_has_payload();
      ::media_message::StreamMessage_StreamContentNack* temp = payload_.stream_content_nack_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.stream_content_nack_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::media_message::StreamMessage_StreamContentNack& StreamMessage::_internal_stream_content_nack() const {
  return _internal_has_stream_content_nack()
      ? *payload_.stream_content_nack_
      : reinterpret_cast< ::media_message::StreamMessage_StreamContentNack&>(::media_message::_StreamMessage_StreamContentNack_default_instance_);
}
inline const ::media_message::StreamMessage_StreamContentNack& StreamMessage::stream_content_nack() const {
  // @@protoc_insertion_point(field_get:media_message.StreamMessage.stream_content_nack)
  return _internal_stream_content_nack();
}
inline ::media_message::StreamMessage_StreamContentNack* StreamMessage::unsafe_arena_release_stream_content_nack() {
  // @@protoc_insertion_point(field_unsafe_arena_release:media_message.StreamMessage.stream_content_nack)
  if (_internal_has_stream_content_nack()) {
    clear_has_payload();
    ::media_message::StreamMessage_StreamContentNack* temp = payload_.stream_content_nack_;
    payload_.stream_content_nack_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void StreamMessage::unsafe_arena_set_allocated_stream_content_nack(::media_message::StreamMessage_StreamContentNack* stream_content_nack) {
  clear_payload();
  if (stream_content_nack) {
    set_has_stream_content_nack();
    payload_.stream_content_nack_ = stream_content_nack;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:media_message.StreamMessage.stream_content_nack)
}
inline ::media_message::StreamMessage_StreamContentNack* StreamMessage::_internal_mutable_stream_content_nack() {
  if (!_internal_has_stream_content_nack()) {
    clear_payload();
    set_has_stream_content_nack();
    payload_.stream_content_nack_ = CreateMaybeMessage< ::media_message::StreamMessage_StreamContentNack >(GetArenaForAllocation());
  }
  return payload_.stream_content_nack_;
}
inline ::media_message::StreamMessage_StreamContentNack* StreamMessage::mutable_stream_content_nack() {
  ::media_message::StreamMessage_StreamContentNack* _msg = _internal_mutable_stream_content_nack();
  // @@protoc_insertion_point(field_mutable:media_message.StreamMessage.stream_content_nack)
  return _msg;
}

// .media_message.StreamMessage.StreamContentAck stream_content_ack = 9;
inline bool StreamMessage::_internal_has_stream_content_ack() const {
  return payload_case() == kStreamContentAck;
}
inline bool StreamMessage::has_stream_content_ack() const {
  return _internal_has_stream_content_ack();
}
inline void StreamMessage::set_has_stream_content_ack() {
  _oneof_case_[0] = kStreamContentAck;
}
inline void StreamMessage::clear_stream_content_ack() {
  if (_internal_has_stream_content_ack()) {
    if (GetArenaForAllocation() == nullptr) {
      delete payload_.stream_content_ack_;
    }
    clear_has_payload();
  }
}
inline ::media_message::StreamMessage_StreamContentAck* StreamMessage::release_stream_content_ack() {
  // @@protoc_insertion_point(field_release:media_message.StreamMessage.stream_content_ack)
  if (_internal_has_stream_content_ack()) {
    clear_has_payload();
      ::media_message::StreamMessage_StreamContentAck* temp = payload_.stream_content_ack_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.stream_content_ack_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::media_message::StreamMessage_StreamContentAck& StreamMessage::_internal_stream_content_ack() const {
  return _internal_has_stream_content_ack()
      ? *payload_.stream_content_ack_
      : reinterpret_cast< ::media_message::StreamMessage_StreamContentAck&>(::media_message::_StreamMessage_StreamContentAck_default_instance_);
}
inline const ::media_message::StreamMessage_StreamContentAck& StreamMessage::stream_content_ack() const {
  // @@protoc_insertion_point(field_get:media_message.StreamMessage.stream_content_ack)
  return _internal_stream_content_ack();
}
inline ::media_message::StreamMessage_StreamContentAck* StreamMessage::unsafe_arena_release_stream_content_ack() {
  // @@protoc_insertion_point(field_unsafe_arena_release:media_message.StreamMessage.stream_content_ack)
  if (_internal_has_stream_content_ack()) {
    clear_has_payload();
    ::media_message::StreamMessage_StreamContentAck* temp = payload_.stream_content_ack_;
    payload_.stream_content_ack_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void StreamMessage::unsafe_arena_set_allocated_stream_content_ack(::media_message::StreamMessage_StreamContentAck* stream_content_ack) {
  clear_payload();
  if (stream_content_ack) {
    set_has_stream_content_ack();
    payload_.stream_content_ack_ = stream_content_ack;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:media_message.StreamMessage.stream_content_ack)
}
inline ::media_message::StreamMessage_StreamContentAck* StreamMessage::_internal_mutable_stream_content_ack() {
  if (!_internal_has_stream_content_ack()) {
    clear_payload();
    set_has_stream_content_ack();
    payload_.stream_content_ack_ = CreateMaybeMessage< ::media_message::StreamMessage_StreamContentAck >(GetArenaForAllocation());
  }
  return payload_.stream_content_ack_;
}
inline ::media_message::StreamMessage_StreamContentAck* StreamMessage::mutable_stream_content_ack() {
  ::media_message::StreamMessage_StreamContentAck* _msg = _internal_mutable_stream_content_ack();
  // @@protoc_insertion_point(field_mutable:media_message.StreamMessage.stream_content_ack)
  return _msg;
}

// .media_message.StreamMessage.Join join = 7;
inline bool StreamMessage::_internal_has_join() const {
  return payload_case() == kJoin;
}
inline bool StreamMessage::has_join() const {
  return _internal_has_join();
}
inline void StreamMessage::set_has_join() {
  _oneof_case_[0] = kJoin;
}
inline void StreamMessage::clear_join() {
  if (_internal_has_join()) {
    if (GetArenaForAllocation() == nullptr) {
      delete payload_.join_;
    }
    clear_has_payload();
  }
}
inline ::media_message::StreamMessage_Join* StreamMessage::release_join() {
  // @@protoc_insertion_point(field_release:media_message.StreamMessage.join)
  if (_internal_has_join()) {
    clear_has_payload();
      ::media_message::StreamMessage_Join* temp = payload_.join_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.join_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::media_message::StreamMessage_Join& StreamMessage::_internal_join() const {
  return _internal_has_join()
      ? *payload_.join_
      : reinterpret_cast< ::media_message::StreamMessage_Join&>(::media_message::_StreamMessage_Join_default_instance_);
}
inline const ::media_message::StreamMessage_Join& StreamMessage::join() const {
  // @@protoc_insertion_point(field_get:media_message.StreamMessage.join)
  return _internal_join();
}
inline ::media_message::StreamMessage_Join* StreamMessage::unsafe_arena_release_join() {
  // @@protoc_insertion_point(field_unsafe_arena_release:media_message.StreamMessage.join)
  if (_internal_has_join()) {
    clear_has_payload();
    ::media_message::StreamMessage_Join* temp = payload_.join_;
    payload_.join_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void StreamMessage::unsafe_arena_set_allocated_join(::media_message::StreamMessage_Join* join) {
  clear_payload();
  if (join) {
    set_has_join();
    payload_.join_ = join;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:media_message.StreamMessage.join)
}
inline ::media_message::StreamMessage_Join* StreamMessage::_internal_mutable_join() {
  if (!_internal_has_join()) {
    clear_payload();
    set_has_join();
    payload_.join_ = CreateMaybeMessage< ::media_message::StreamMessage_Join >(GetArenaForAllocation());
  }
  return payload_.join_;
}
inline ::media_message::StreamMessage_Join* StreamMessage::mutable_join() {
  ::media_message::StreamMessage_Join* _msg = _internal_mutable_join();
  // @@protoc_insertion_point(field_mutable:media_message.StreamMessage.join)
  return _msg;
}

// .media_message.StreamMessage.JoinAck join_ack = 8;
inline bool StreamMessage::_internal_has_join_ack() const {
  return payload_case() == kJoinAck;
}
inline bool StreamMessage::has_join_ack() const {
  return _internal_has_join_ack();
}
inline void StreamMessage::set_has_join_ack() {
  _oneof_case_[0] = kJoinAck;
}
inline void StreamMessage::clear_join_ack() {
  if (_internal_has_join_ack()) {
    if (GetArenaForAllocation() == nullptr) {
      delete payload_.join_ack_;
    }
    clear_has_payload();
  }
}
inline ::media_message::StreamMessage_JoinAck* StreamMessage::release_join_ack() {
  // @@protoc_insertion_point(field_release:media_message.StreamMessage.join_ack)
  if (_internal_has_join_ack()) {
    clear_has_payload();
      ::media_message::StreamMessage_JoinAck* temp = payload_.join_ack_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.join_ack_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::media_message::StreamMessage_JoinAck& StreamMessage::_internal_join_ack() const {
  return _internal_has_join_ack()
      ? *payload_.join_ack_
      : reinterpret_cast< ::media_message::StreamMessage_JoinAck&>(::media_message::_StreamMessage_JoinAck_default_instance_);
}
inline const ::media_message::StreamMessage_JoinAck& StreamMessage::join_ack() const {
  // @@protoc_insertion_point(field_get:media_message.StreamMessage.join_ack)
  return _internal_join_ack();
}
inline ::media_message::StreamMessage_JoinAck* StreamMessage::unsafe_arena_release_join_ack() {
  // @@protoc_insertion_point(field_unsafe_arena_release:media_message.StreamMessage.join_ack)
  if (_internal_has_join_ack()) {
    clear_has_payload();
    ::media_message::StreamMessage_JoinAck* temp = payload_.join_ack_;
    payload_.join_ack_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void StreamMessage::unsafe_arena_set_allocated_join_ack(::media_message::StreamMessage_JoinAck* join_ack) {
  clear_payload();
  if (join_ack) {
    set_has_join_ack();
    payload_.join_ack_ = join_ack;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:media_message.StreamMessage.join_ack)
}
inline ::media_message::StreamMessage_JoinAck* StreamMessage::_internal_mutable_join_ack() {
  if (!_internal_has_join_ack()) {
    clear_payload();
    set_has_join_ack();
    payload_.join_ack_ = CreateMaybeMessage< ::media_message::StreamMessage_JoinAck >(GetArenaForAllocation());
  }
  return payload_.join_ack_;
}
inline ::media_message::StreamMessage_JoinAck* StreamMessage::mutable_join_ack() {
  ::media_message::StreamMessage_JoinAck* _msg = _internal_mutable_join_ack();
  // @@protoc_insertion_point(field_mutable:media_message.StreamMessage.join_ack)
  return _msg;
}

// .media_message.StreamMessage.IdrRequest idr_request = 10;
inline bool StreamMessage::_internal_has_idr_request() const {
  return payload_case() == kIdrRequest;
}
inline bool StreamMessage::has_idr_request() const {
  return _internal_has_idr_request();
}
inline void StreamMessage::set_has_idr_request() {
  _oneof_case_[0] = kIdrRequest;
}
inline void StreamMessage::clear_idr_request() {
  if (_internal_has_idr_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete payload_.idr_request_;
    }
    clear_has_payload();
  }
}
inline ::media_message::StreamMessage_IdrRequest* StreamMessage::release_idr_request() {
  // @@protoc_insertion_point(field_release:media_message.StreamMessage.idr_request)
  if (_internal_has_idr_request()) {
    clear_has_payload();
      ::media_message::StreamMessage_IdrRequest* temp = payload_.idr_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.idr_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::media_message::StreamMessage_IdrRequest& StreamMessage::_internal_idr_request() const {
  return _internal_has_idr_request()
      ? *payload_.idr_request_
      : reinterpret_cast< ::media_message::StreamMessage_IdrRequest&>(::media_message::_StreamMessage_IdrRequest_default_instance_);
}
inline const ::media_message::StreamMessage_IdrRequest& StreamMessage::idr_request() const {
  // @@protoc_insertion_point(field_get:media_message.StreamMessage.idr_request)
  return _internal_idr_request();
}
inline ::media_message::StreamMessage_IdrRequest* StreamMessage::unsafe_arena_release_idr_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:media_message.StreamMessage.idr_request)
  if (_internal_has_idr_request()) {
    clear_has_payload();
    ::media_message::StreamMessage_IdrRequest* temp = payload_.idr_request_;
    payload_.idr_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void StreamMessage::unsafe_arena_set_allocated_idr_request(::media_message::StreamMessage_IdrRequest* idr_request) {
  clear_payload();
  if (idr_request) {
    set_has_idr_request();
    payload_.idr_request_ = idr_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:media_message.StreamMessage.idr_request)
}
inline ::media_message::StreamMessage_IdrRequest* StreamMessage::_internal_mutable_idr_request() {
  if (!_internal_has_idr_request()) {
    clear_payload();
    set_has_idr_request();
    payload_.idr_request_ = CreateMaybeMessage< ::media_message::StreamMessage_IdrRequest >(GetArenaForAllocation());
  }
  return payload_.idr_request_;
}
inline ::media_message::StreamMessage_IdrRequest* StreamMessage::mutable_idr_request() {
  ::media_message::StreamMessage_IdrRequest* _msg = _internal_mutable_idr_request();
  // @@protoc_insertion_point(field_mutable:media_message.StreamMessage.idr_request)
  return _msg;
}

// bool retransmitted = 15;
inline void StreamMessage::clear_retransmitted() {
  retransmitted_ = false;
}
inline bool StreamMessage::_internal_retransmitted() const {
  return retransmitted_;
}
inline bool StreamMessage::retransmitted() const {
  // @@protoc_insertion_point(field_get:media_message.StreamMessage.retransmitted)
  return _internal_retransmitted();
}
inline void StreamMessage::_internal_set_retransmitted(bool value) {
  
  retransmitted_ = value;
}
inline void StreamMessage::set_retransmitted(bool value) {
  _internal_set_retransmitted(value);
  // @@protoc_insertion_point(field_set:media_message.StreamMessage.retransmitted)
}

inline bool StreamMessage::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void StreamMessage::clear_has_payload() {
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline StreamMessage::PayloadCase StreamMessage::payload_case() const {
  return StreamMessage::PayloadCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace media_message

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::media_message::MediaDataHeader_VideoFrameType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::media_message::MediaDataHeader_VideoFrameType>() {
  return ::media_message::MediaDataHeader_VideoFrameType_descriptor();
}
template <> struct is_proto_enum< ::media_message::MediaType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::media_message::MediaType>() {
  return ::media_message::MediaType_descriptor();
}
template <> struct is_proto_enum< ::media_message::PacketizeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::media_message::PacketizeType>() {
  return ::media_message::PacketizeType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_media_2eproto
