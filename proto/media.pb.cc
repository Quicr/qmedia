// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: media.proto

#include "media.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace media_message {
constexpr MediaDataHeader_Audio::MediaDataHeader_Audio(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : audioenergylevel_(0){}
struct MediaDataHeader_AudioDefaultTypeInternal {
  constexpr MediaDataHeader_AudioDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MediaDataHeader_AudioDefaultTypeInternal() {}
  union {
    MediaDataHeader_Audio _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MediaDataHeader_AudioDefaultTypeInternal _MediaDataHeader_Audio_default_instance_;
constexpr MediaDataHeader_Video::MediaDataHeader_Video(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : marker_(0)

  , intraframe_(false)
  , discardable_(false)
  , spatiallayerid_(0u)
  , temporallayerid_(0u){}
struct MediaDataHeader_VideoDefaultTypeInternal {
  constexpr MediaDataHeader_VideoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MediaDataHeader_VideoDefaultTypeInternal() {}
  union {
    MediaDataHeader_Video _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MediaDataHeader_VideoDefaultTypeInternal _MediaDataHeader_Video_default_instance_;
constexpr MediaDataHeader::MediaDataHeader(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sourceid_(uint64_t{0u})
  , sourcerecordtime_(uint64_t{0u})
  , sequencenumber_(uint64_t{0u})
  , mediatype_(0)

  , packetizetype_(0)

  , packetnumber_(uint64_t{0u})
  , prioritylevel_(0u)
  , packetcount_(uint64_t{0u})
  , framesize_(uint64_t{0u})
  , _oneof_case_{}{}
struct MediaDataHeaderDefaultTypeInternal {
  constexpr MediaDataHeaderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MediaDataHeaderDefaultTypeInternal() {}
  union {
    MediaDataHeader _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MediaDataHeaderDefaultTypeInternal _MediaDataHeader_default_instance_;
constexpr MediaData::MediaData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : encryptedmediadata_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , header_(nullptr){}
struct MediaDataDefaultTypeInternal {
  constexpr MediaDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MediaDataDefaultTypeInternal() {}
  union {
    MediaData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MediaDataDefaultTypeInternal _MediaData_default_instance_;
constexpr StreamMessage_Join::StreamMessage_Join(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : echo_(false){}
struct StreamMessage_JoinDefaultTypeInternal {
  constexpr StreamMessage_JoinDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StreamMessage_JoinDefaultTypeInternal() {}
  union {
    StreamMessage_Join _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StreamMessage_JoinDefaultTypeInternal _StreamMessage_Join_default_instance_;
constexpr StreamMessage_JoinAck::StreamMessage_JoinAck(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct StreamMessage_JoinAckDefaultTypeInternal {
  constexpr StreamMessage_JoinAckDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StreamMessage_JoinAckDefaultTypeInternal() {}
  union {
    StreamMessage_JoinAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StreamMessage_JoinAckDefaultTypeInternal _StreamMessage_JoinAck_default_instance_;
constexpr StreamMessage_IdrRequest::StreamMessage_IdrRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : client_id_(uint64_t{0u})
  , source_id_(uint64_t{0u})
  , source_timestamp_(uint64_t{0u}){}
struct StreamMessage_IdrRequestDefaultTypeInternal {
  constexpr StreamMessage_IdrRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StreamMessage_IdrRequestDefaultTypeInternal() {}
  union {
    StreamMessage_IdrRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StreamMessage_IdrRequestDefaultTypeInternal _StreamMessage_IdrRequest_default_instance_;
constexpr StreamMessage_StreamContent::StreamMessage_StreamContent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mediadata_(){}
struct StreamMessage_StreamContentDefaultTypeInternal {
  constexpr StreamMessage_StreamContentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StreamMessage_StreamContentDefaultTypeInternal() {}
  union {
    StreamMessage_StreamContent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StreamMessage_StreamContentDefaultTypeInternal _StreamMessage_StreamContent_default_instance_;
constexpr StreamMessage_StreamContentAck::StreamMessage_StreamContentAck(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stream_seq_num_(uint64_t{0u}){}
struct StreamMessage_StreamContentAckDefaultTypeInternal {
  constexpr StreamMessage_StreamContentAckDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StreamMessage_StreamContentAckDefaultTypeInternal() {}
  union {
    StreamMessage_StreamContentAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StreamMessage_StreamContentAckDefaultTypeInternal _StreamMessage_StreamContentAck_default_instance_;
constexpr StreamMessage_StreamContentNack_Ack::StreamMessage_StreamContentNack_Ack(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sequencenumber_(uint64_t{0u})
  , sendertimems_(uint64_t{0u})
  , receivertimems_(uint64_t{0u})
  , packetsize_(0u)
  , mediatype_(0)
{}
struct StreamMessage_StreamContentNack_AckDefaultTypeInternal {
  constexpr StreamMessage_StreamContentNack_AckDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StreamMessage_StreamContentNack_AckDefaultTypeInternal() {}
  union {
    StreamMessage_StreamContentNack_Ack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StreamMessage_StreamContentNack_AckDefaultTypeInternal _StreamMessage_StreamContentNack_Ack_default_instance_;
constexpr StreamMessage_StreamContentNack::StreamMessage_StreamContentNack(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nacksequencenumber_()
  , _nacksequencenumber_cached_byte_size_(0)
  , acks_()
  , sourceuserid_(uint64_t{0u}){}
struct StreamMessage_StreamContentNackDefaultTypeInternal {
  constexpr StreamMessage_StreamContentNackDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StreamMessage_StreamContentNackDefaultTypeInternal() {}
  union {
    StreamMessage_StreamContentNack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StreamMessage_StreamContentNackDefaultTypeInternal _StreamMessage_StreamContentNack_default_instance_;
constexpr StreamMessage::StreamMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : conference_id_(uint64_t{0u})
  , client_id_(uint64_t{0u})
  , transport_seq_num_(uint64_t{0u})
  , retransmitted_(false)
  , _oneof_case_{}{}
struct StreamMessageDefaultTypeInternal {
  constexpr StreamMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StreamMessageDefaultTypeInternal() {}
  union {
    StreamMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StreamMessageDefaultTypeInternal _StreamMessage_default_instance_;
}  // namespace media_message
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_media_2eproto[12];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_media_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_media_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_media_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::media_message::MediaDataHeader_Audio, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::media_message::MediaDataHeader_Audio, audioenergylevel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::media_message::MediaDataHeader_Video, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::media_message::MediaDataHeader_Video, marker_),
  PROTOBUF_FIELD_OFFSET(::media_message::MediaDataHeader_Video, intraframe_),
  PROTOBUF_FIELD_OFFSET(::media_message::MediaDataHeader_Video, discardable_),
  PROTOBUF_FIELD_OFFSET(::media_message::MediaDataHeader_Video, spatiallayerid_),
  PROTOBUF_FIELD_OFFSET(::media_message::MediaDataHeader_Video, temporallayerid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::media_message::MediaDataHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::media_message::MediaDataHeader, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::media_message::MediaDataHeader, mediatype_),
  PROTOBUF_FIELD_OFFSET(::media_message::MediaDataHeader, sourceid_),
  PROTOBUF_FIELD_OFFSET(::media_message::MediaDataHeader, sourcerecordtime_),
  PROTOBUF_FIELD_OFFSET(::media_message::MediaDataHeader, sequencenumber_),
  PROTOBUF_FIELD_OFFSET(::media_message::MediaDataHeader, packetizetype_),
  PROTOBUF_FIELD_OFFSET(::media_message::MediaDataHeader, packetnumber_),
  PROTOBUF_FIELD_OFFSET(::media_message::MediaDataHeader, packetcount_),
  PROTOBUF_FIELD_OFFSET(::media_message::MediaDataHeader, framesize_),
  PROTOBUF_FIELD_OFFSET(::media_message::MediaDataHeader, prioritylevel_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::media_message::MediaDataHeader, header_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::media_message::MediaData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::media_message::MediaData, header_),
  PROTOBUF_FIELD_OFFSET(::media_message::MediaData, encryptedmediadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::media_message::StreamMessage_Join, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::media_message::StreamMessage_Join, echo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::media_message::StreamMessage_JoinAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::media_message::StreamMessage_IdrRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::media_message::StreamMessage_IdrRequest, client_id_),
  PROTOBUF_FIELD_OFFSET(::media_message::StreamMessage_IdrRequest, source_id_),
  PROTOBUF_FIELD_OFFSET(::media_message::StreamMessage_IdrRequest, source_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::media_message::StreamMessage_StreamContent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::media_message::StreamMessage_StreamContent, mediadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::media_message::StreamMessage_StreamContentAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::media_message::StreamMessage_StreamContentAck, stream_seq_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::media_message::StreamMessage_StreamContentNack_Ack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::media_message::StreamMessage_StreamContentNack_Ack, sequencenumber_),
  PROTOBUF_FIELD_OFFSET(::media_message::StreamMessage_StreamContentNack_Ack, sendertimems_),
  PROTOBUF_FIELD_OFFSET(::media_message::StreamMessage_StreamContentNack_Ack, receivertimems_),
  PROTOBUF_FIELD_OFFSET(::media_message::StreamMessage_StreamContentNack_Ack, packetsize_),
  PROTOBUF_FIELD_OFFSET(::media_message::StreamMessage_StreamContentNack_Ack, mediatype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::media_message::StreamMessage_StreamContentNack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::media_message::StreamMessage_StreamContentNack, sourceuserid_),
  PROTOBUF_FIELD_OFFSET(::media_message::StreamMessage_StreamContentNack, nacksequencenumber_),
  PROTOBUF_FIELD_OFFSET(::media_message::StreamMessage_StreamContentNack, acks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::media_message::StreamMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::media_message::StreamMessage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::media_message::StreamMessage, conference_id_),
  PROTOBUF_FIELD_OFFSET(::media_message::StreamMessage, client_id_),
  PROTOBUF_FIELD_OFFSET(::media_message::StreamMessage, transport_seq_num_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::media_message::StreamMessage, retransmitted_),
  PROTOBUF_FIELD_OFFSET(::media_message::StreamMessage, payload_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::media_message::MediaDataHeader_Audio)},
  { 7, -1, -1, sizeof(::media_message::MediaDataHeader_Video)},
  { 18, -1, -1, sizeof(::media_message::MediaDataHeader)},
  { 36, -1, -1, sizeof(::media_message::MediaData)},
  { 44, -1, -1, sizeof(::media_message::StreamMessage_Join)},
  { 51, -1, -1, sizeof(::media_message::StreamMessage_JoinAck)},
  { 57, -1, -1, sizeof(::media_message::StreamMessage_IdrRequest)},
  { 66, -1, -1, sizeof(::media_message::StreamMessage_StreamContent)},
  { 73, -1, -1, sizeof(::media_message::StreamMessage_StreamContentAck)},
  { 80, -1, -1, sizeof(::media_message::StreamMessage_StreamContentNack_Ack)},
  { 91, -1, -1, sizeof(::media_message::StreamMessage_StreamContentNack)},
  { 100, -1, -1, sizeof(::media_message::StreamMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::media_message::_MediaDataHeader_Audio_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::media_message::_MediaDataHeader_Video_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::media_message::_MediaDataHeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::media_message::_MediaData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::media_message::_StreamMessage_Join_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::media_message::_StreamMessage_JoinAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::media_message::_StreamMessage_IdrRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::media_message::_StreamMessage_StreamContent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::media_message::_StreamMessage_StreamContentAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::media_message::_StreamMessage_StreamContentNack_Ack_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::media_message::_StreamMessage_StreamContentNack_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::media_message::_StreamMessage_default_instance_),
};

const char descriptor_table_protodef_media_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013media.proto\022\rmedia_message\"\375\004\n\017MediaDa"
  "taHeader\022+\n\tmediaType\030\001 \001(\0162\030.media_mess"
  "age.MediaType\022\020\n\010sourceID\030\002 \001(\004\022\030\n\020sourc"
  "eRecordTime\030\003 \001(\006\022\026\n\016sequenceNumber\030\004 \001("
  "\004\0223\n\rpacketizeType\030\t \001(\0162\034.media_message"
  ".PacketizeType\022\024\n\014packetNumber\030\n \001(\004\022\023\n\013"
  "packetCount\030\013 \001(\004\022\021\n\tframeSize\030\014 \001(\004\022\025\n\r"
  "priorityLevel\030\r \001(\r\022<\n\014audio_header\030\007 \001("
  "\0132$.media_message.MediaDataHeader.AudioH"
  "\000\022<\n\014video_header\030\010 \001(\0132$.media_message."
  "MediaDataHeader.VideoH\000\032!\n\005Audio\022\030\n\020audi"
  "oEnergyLevel\030\001 \001(\002\032\240\001\n\005Video\022=\n\006marker\030\001"
  " \001(\0162-.media_message.MediaDataHeader.Vid"
  "eoFrameType\022\022\n\nintraFrame\030\002 \001(\010\022\023\n\013disca"
  "rdable\030\003 \001(\010\022\026\n\016spatialLayerId\030\004 \001(\r\022\027\n\017"
  "temporalLayerId\030\005 \001(\r\"#\n\016VideoFrameType\022"
  "\010\n\004None\020\000\022\007\n\003Idr\020\001B\010\n\006header\"W\n\tMediaDat"
  "a\022.\n\006header\030\001 \001(\0132\036.media_message.MediaD"
  "ataHeader\022\032\n\022encryptedMediaData\030\002 \001(\014\"\367\007"
  "\n\rStreamMessage\022\025\n\rconference_id\030\001 \001(\004\022\021"
  "\n\tclient_id\030\002 \001(\004\022\031\n\021transport_seq_num\030\003"
  " \001(\004\022D\n\016stream_content\030\005 \001(\0132*.media_mes"
  "sage.StreamMessage.StreamContentH\000\022M\n\023st"
  "ream_content_nack\030\006 \001(\0132..media_message."
  "StreamMessage.StreamContentNackH\000\022K\n\022str"
  "eam_content_ack\030\t \001(\0132-.media_message.St"
  "reamMessage.StreamContentAckH\000\0221\n\004join\030\007"
  " \001(\0132!.media_message.StreamMessage.JoinH"
  "\000\0228\n\010join_ack\030\010 \001(\0132$.media_message.Stre"
  "amMessage.JoinAckH\000\022>\n\013idr_request\030\n \001(\013"
  "2\'.media_message.StreamMessage.IdrReques"
  "tH\000\022\025\n\rretransmitted\030\017 \001(\010\032\024\n\004Join\022\014\n\004ec"
  "ho\030\001 \001(\010\032\t\n\007JoinAck\032L\n\nIdrRequest\022\021\n\tcli"
  "ent_id\030\001 \001(\004\022\021\n\tsource_id\030\002 \001(\004\022\030\n\020sourc"
  "e_timestamp\030\003 \001(\004\032<\n\rStreamContent\022+\n\tme"
  "diaData\030\001 \003(\0132\030.media_message.MediaData\032"
  "*\n\020StreamContentAck\022\026\n\016stream_seq_num\030\001 "
  "\001(\004\032\226\002\n\021StreamContentNack\022\024\n\014sourceUserI"
  "D\030\001 \001(\004\022\032\n\022nackSequenceNumber\030\002 \003(\004\022@\n\004a"
  "cks\030\003 \003(\01322.media_message.StreamMessage."
  "StreamContentNack.Ack\032\214\001\n\003Ack\022\026\n\016sequenc"
  "eNumber\030\001 \001(\004\022\024\n\014senderTimeMs\030\002 \001(\006\022\026\n\016r"
  "eceiverTimeMs\030\003 \001(\006\022\022\n\npacketSize\030\004 \001(\r\022"
  "+\n\tmediaType\030\005 \001(\0162\030.media_message.Media"
  "TypeB\t\n\007payload*B\n\tMediaType\022\021\n\rOPUS_40K"
  "_20MS\020\000\022\007\n\003AV1\020\001\022\007\n\003L16\020\002\022\007\n\003F32\020\003\022\007\n\003RA"
  "W\020\004*%\n\rPacketizeType\022\010\n\004None\020\000\022\n\n\006Simple"
  "\020\001b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_media_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_media_2eproto = {
  false, false, 1890, descriptor_table_protodef_media_2eproto, "media.proto", 
  &descriptor_table_media_2eproto_once, nullptr, 0, 12,
  schemas, file_default_instances, TableStruct_media_2eproto::offsets,
  file_level_metadata_media_2eproto, file_level_enum_descriptors_media_2eproto, file_level_service_descriptors_media_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_media_2eproto_getter() {
  return &descriptor_table_media_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_media_2eproto(&descriptor_table_media_2eproto);
namespace media_message {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MediaDataHeader_VideoFrameType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_media_2eproto);
  return file_level_enum_descriptors_media_2eproto[0];
}
bool MediaDataHeader_VideoFrameType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MediaDataHeader_VideoFrameType MediaDataHeader::None;
constexpr MediaDataHeader_VideoFrameType MediaDataHeader::Idr;
constexpr MediaDataHeader_VideoFrameType MediaDataHeader::VideoFrameType_MIN;
constexpr MediaDataHeader_VideoFrameType MediaDataHeader::VideoFrameType_MAX;
constexpr int MediaDataHeader::VideoFrameType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MediaType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_media_2eproto);
  return file_level_enum_descriptors_media_2eproto[1];
}
bool MediaType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PacketizeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_media_2eproto);
  return file_level_enum_descriptors_media_2eproto[2];
}
bool PacketizeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class MediaDataHeader_Audio::_Internal {
 public:
};

MediaDataHeader_Audio::MediaDataHeader_Audio(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:media_message.MediaDataHeader.Audio)
}
MediaDataHeader_Audio::MediaDataHeader_Audio(const MediaDataHeader_Audio& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  audioenergylevel_ = from.audioenergylevel_;
  // @@protoc_insertion_point(copy_constructor:media_message.MediaDataHeader.Audio)
}

void MediaDataHeader_Audio::SharedCtor() {
audioenergylevel_ = 0;
}

MediaDataHeader_Audio::~MediaDataHeader_Audio() {
  // @@protoc_insertion_point(destructor:media_message.MediaDataHeader.Audio)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MediaDataHeader_Audio::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MediaDataHeader_Audio::ArenaDtor(void* object) {
  MediaDataHeader_Audio* _this = reinterpret_cast< MediaDataHeader_Audio* >(object);
  (void)_this;
}
void MediaDataHeader_Audio::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MediaDataHeader_Audio::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MediaDataHeader_Audio::Clear() {
// @@protoc_insertion_point(message_clear_start:media_message.MediaDataHeader.Audio)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  audioenergylevel_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MediaDataHeader_Audio::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float audioEnergyLevel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          audioenergylevel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MediaDataHeader_Audio::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:media_message.MediaDataHeader.Audio)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float audioEnergyLevel = 1;
  if (!(this->_internal_audioenergylevel() <= 0 && this->_internal_audioenergylevel() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_audioenergylevel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:media_message.MediaDataHeader.Audio)
  return target;
}

size_t MediaDataHeader_Audio::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:media_message.MediaDataHeader.Audio)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float audioEnergyLevel = 1;
  if (!(this->_internal_audioenergylevel() <= 0 && this->_internal_audioenergylevel() >= 0)) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MediaDataHeader_Audio::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MediaDataHeader_Audio::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MediaDataHeader_Audio::GetClassData() const { return &_class_data_; }

void MediaDataHeader_Audio::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MediaDataHeader_Audio *>(to)->MergeFrom(
      static_cast<const MediaDataHeader_Audio &>(from));
}


void MediaDataHeader_Audio::MergeFrom(const MediaDataHeader_Audio& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:media_message.MediaDataHeader.Audio)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from._internal_audioenergylevel() <= 0 && from._internal_audioenergylevel() >= 0)) {
    _internal_set_audioenergylevel(from._internal_audioenergylevel());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MediaDataHeader_Audio::CopyFrom(const MediaDataHeader_Audio& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:media_message.MediaDataHeader.Audio)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaDataHeader_Audio::IsInitialized() const {
  return true;
}

void MediaDataHeader_Audio::InternalSwap(MediaDataHeader_Audio* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(audioenergylevel_, other->audioenergylevel_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MediaDataHeader_Audio::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_media_2eproto_getter, &descriptor_table_media_2eproto_once,
      file_level_metadata_media_2eproto[0]);
}

// ===================================================================

class MediaDataHeader_Video::_Internal {
 public:
};

MediaDataHeader_Video::MediaDataHeader_Video(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:media_message.MediaDataHeader.Video)
}
MediaDataHeader_Video::MediaDataHeader_Video(const MediaDataHeader_Video& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&marker_, &from.marker_,
    static_cast<size_t>(reinterpret_cast<char*>(&temporallayerid_) -
    reinterpret_cast<char*>(&marker_)) + sizeof(temporallayerid_));
  // @@protoc_insertion_point(copy_constructor:media_message.MediaDataHeader.Video)
}

void MediaDataHeader_Video::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&marker_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&temporallayerid_) -
    reinterpret_cast<char*>(&marker_)) + sizeof(temporallayerid_));
}

MediaDataHeader_Video::~MediaDataHeader_Video() {
  // @@protoc_insertion_point(destructor:media_message.MediaDataHeader.Video)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MediaDataHeader_Video::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MediaDataHeader_Video::ArenaDtor(void* object) {
  MediaDataHeader_Video* _this = reinterpret_cast< MediaDataHeader_Video* >(object);
  (void)_this;
}
void MediaDataHeader_Video::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MediaDataHeader_Video::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MediaDataHeader_Video::Clear() {
// @@protoc_insertion_point(message_clear_start:media_message.MediaDataHeader.Video)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&marker_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&temporallayerid_) -
      reinterpret_cast<char*>(&marker_)) + sizeof(temporallayerid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MediaDataHeader_Video::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .media_message.MediaDataHeader.VideoFrameType marker = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_marker(static_cast<::media_message::MediaDataHeader_VideoFrameType>(val));
        } else
          goto handle_unusual;
        continue;
      // bool intraFrame = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          intraframe_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool discardable = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          discardable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 spatialLayerId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          spatiallayerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 temporalLayerId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          temporallayerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MediaDataHeader_Video::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:media_message.MediaDataHeader.Video)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .media_message.MediaDataHeader.VideoFrameType marker = 1;
  if (this->_internal_marker() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_marker(), target);
  }

  // bool intraFrame = 2;
  if (this->_internal_intraframe() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_intraframe(), target);
  }

  // bool discardable = 3;
  if (this->_internal_discardable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_discardable(), target);
  }

  // uint32 spatialLayerId = 4;
  if (this->_internal_spatiallayerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_spatiallayerid(), target);
  }

  // uint32 temporalLayerId = 5;
  if (this->_internal_temporallayerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_temporallayerid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:media_message.MediaDataHeader.Video)
  return target;
}

size_t MediaDataHeader_Video::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:media_message.MediaDataHeader.Video)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .media_message.MediaDataHeader.VideoFrameType marker = 1;
  if (this->_internal_marker() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_marker());
  }

  // bool intraFrame = 2;
  if (this->_internal_intraframe() != 0) {
    total_size += 1 + 1;
  }

  // bool discardable = 3;
  if (this->_internal_discardable() != 0) {
    total_size += 1 + 1;
  }

  // uint32 spatialLayerId = 4;
  if (this->_internal_spatiallayerid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_spatiallayerid());
  }

  // uint32 temporalLayerId = 5;
  if (this->_internal_temporallayerid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_temporallayerid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MediaDataHeader_Video::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MediaDataHeader_Video::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MediaDataHeader_Video::GetClassData() const { return &_class_data_; }

void MediaDataHeader_Video::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MediaDataHeader_Video *>(to)->MergeFrom(
      static_cast<const MediaDataHeader_Video &>(from));
}


void MediaDataHeader_Video::MergeFrom(const MediaDataHeader_Video& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:media_message.MediaDataHeader.Video)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_marker() != 0) {
    _internal_set_marker(from._internal_marker());
  }
  if (from._internal_intraframe() != 0) {
    _internal_set_intraframe(from._internal_intraframe());
  }
  if (from._internal_discardable() != 0) {
    _internal_set_discardable(from._internal_discardable());
  }
  if (from._internal_spatiallayerid() != 0) {
    _internal_set_spatiallayerid(from._internal_spatiallayerid());
  }
  if (from._internal_temporallayerid() != 0) {
    _internal_set_temporallayerid(from._internal_temporallayerid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MediaDataHeader_Video::CopyFrom(const MediaDataHeader_Video& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:media_message.MediaDataHeader.Video)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaDataHeader_Video::IsInitialized() const {
  return true;
}

void MediaDataHeader_Video::InternalSwap(MediaDataHeader_Video* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MediaDataHeader_Video, temporallayerid_)
      + sizeof(MediaDataHeader_Video::temporallayerid_)
      - PROTOBUF_FIELD_OFFSET(MediaDataHeader_Video, marker_)>(
          reinterpret_cast<char*>(&marker_),
          reinterpret_cast<char*>(&other->marker_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MediaDataHeader_Video::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_media_2eproto_getter, &descriptor_table_media_2eproto_once,
      file_level_metadata_media_2eproto[1]);
}

// ===================================================================

class MediaDataHeader::_Internal {
 public:
  static const ::media_message::MediaDataHeader_Audio& audio_header(const MediaDataHeader* msg);
  static const ::media_message::MediaDataHeader_Video& video_header(const MediaDataHeader* msg);
};

const ::media_message::MediaDataHeader_Audio&
MediaDataHeader::_Internal::audio_header(const MediaDataHeader* msg) {
  return *msg->header_.audio_header_;
}
const ::media_message::MediaDataHeader_Video&
MediaDataHeader::_Internal::video_header(const MediaDataHeader* msg) {
  return *msg->header_.video_header_;
}
void MediaDataHeader::set_allocated_audio_header(::media_message::MediaDataHeader_Audio* audio_header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_header();
  if (audio_header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::media_message::MediaDataHeader_Audio>::GetOwningArena(audio_header);
    if (message_arena != submessage_arena) {
      audio_header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, audio_header, submessage_arena);
    }
    set_has_audio_header();
    header_.audio_header_ = audio_header;
  }
  // @@protoc_insertion_point(field_set_allocated:media_message.MediaDataHeader.audio_header)
}
void MediaDataHeader::set_allocated_video_header(::media_message::MediaDataHeader_Video* video_header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_header();
  if (video_header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::media_message::MediaDataHeader_Video>::GetOwningArena(video_header);
    if (message_arena != submessage_arena) {
      video_header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, video_header, submessage_arena);
    }
    set_has_video_header();
    header_.video_header_ = video_header;
  }
  // @@protoc_insertion_point(field_set_allocated:media_message.MediaDataHeader.video_header)
}
MediaDataHeader::MediaDataHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:media_message.MediaDataHeader)
}
MediaDataHeader::MediaDataHeader(const MediaDataHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&sourceid_, &from.sourceid_,
    static_cast<size_t>(reinterpret_cast<char*>(&framesize_) -
    reinterpret_cast<char*>(&sourceid_)) + sizeof(framesize_));
  clear_has_header();
  switch (from.header_case()) {
    case kAudioHeader: {
      _internal_mutable_audio_header()->::media_message::MediaDataHeader_Audio::MergeFrom(from._internal_audio_header());
      break;
    }
    case kVideoHeader: {
      _internal_mutable_video_header()->::media_message::MediaDataHeader_Video::MergeFrom(from._internal_video_header());
      break;
    }
    case HEADER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:media_message.MediaDataHeader)
}

void MediaDataHeader::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sourceid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&framesize_) -
    reinterpret_cast<char*>(&sourceid_)) + sizeof(framesize_));
clear_has_header();
}

MediaDataHeader::~MediaDataHeader() {
  // @@protoc_insertion_point(destructor:media_message.MediaDataHeader)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MediaDataHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_header()) {
    clear_header();
  }
}

void MediaDataHeader::ArenaDtor(void* object) {
  MediaDataHeader* _this = reinterpret_cast< MediaDataHeader* >(object);
  (void)_this;
}
void MediaDataHeader::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MediaDataHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MediaDataHeader::clear_header() {
// @@protoc_insertion_point(one_of_clear_start:media_message.MediaDataHeader)
  switch (header_case()) {
    case kAudioHeader: {
      if (GetArenaForAllocation() == nullptr) {
        delete header_.audio_header_;
      }
      break;
    }
    case kVideoHeader: {
      if (GetArenaForAllocation() == nullptr) {
        delete header_.video_header_;
      }
      break;
    }
    case HEADER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = HEADER_NOT_SET;
}


void MediaDataHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:media_message.MediaDataHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&sourceid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&framesize_) -
      reinterpret_cast<char*>(&sourceid_)) + sizeof(framesize_));
  clear_header();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MediaDataHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .media_message.MediaType mediaType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mediatype(static_cast<::media_message::MediaType>(val));
        } else
          goto handle_unusual;
        continue;
      // uint64 sourceID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          sourceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // fixed64 sourceRecordTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          sourcerecordtime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else
          goto handle_unusual;
        continue;
      // uint64 sequenceNumber = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          sequencenumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .media_message.MediaDataHeader.Audio audio_header = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_audio_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .media_message.MediaDataHeader.Video video_header = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_video_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .media_message.PacketizeType packetizeType = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_packetizetype(static_cast<::media_message::PacketizeType>(val));
        } else
          goto handle_unusual;
        continue;
      // uint64 packetNumber = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          packetnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 packetCount = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          packetcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 frameSize = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          framesize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 priorityLevel = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          prioritylevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MediaDataHeader::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:media_message.MediaDataHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .media_message.MediaType mediaType = 1;
  if (this->_internal_mediatype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_mediatype(), target);
  }

  // uint64 sourceID = 2;
  if (this->_internal_sourceid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_sourceid(), target);
  }

  // fixed64 sourceRecordTime = 3;
  if (this->_internal_sourcerecordtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_sourcerecordtime(), target);
  }

  // uint64 sequenceNumber = 4;
  if (this->_internal_sequencenumber() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_sequencenumber(), target);
  }

  // .media_message.MediaDataHeader.Audio audio_header = 7;
  if (_internal_has_audio_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::audio_header(this), target, stream);
  }

  // .media_message.MediaDataHeader.Video video_header = 8;
  if (_internal_has_video_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::video_header(this), target, stream);
  }

  // .media_message.PacketizeType packetizeType = 9;
  if (this->_internal_packetizetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_packetizetype(), target);
  }

  // uint64 packetNumber = 10;
  if (this->_internal_packetnumber() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->_internal_packetnumber(), target);
  }

  // uint64 packetCount = 11;
  if (this->_internal_packetcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(11, this->_internal_packetcount(), target);
  }

  // uint64 frameSize = 12;
  if (this->_internal_framesize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(12, this->_internal_framesize(), target);
  }

  // uint32 priorityLevel = 13;
  if (this->_internal_prioritylevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_prioritylevel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:media_message.MediaDataHeader)
  return target;
}

size_t MediaDataHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:media_message.MediaDataHeader)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 sourceID = 2;
  if (this->_internal_sourceid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_sourceid());
  }

  // fixed64 sourceRecordTime = 3;
  if (this->_internal_sourcerecordtime() != 0) {
    total_size += 1 + 8;
  }

  // uint64 sequenceNumber = 4;
  if (this->_internal_sequencenumber() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_sequencenumber());
  }

  // .media_message.MediaType mediaType = 1;
  if (this->_internal_mediatype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mediatype());
  }

  // .media_message.PacketizeType packetizeType = 9;
  if (this->_internal_packetizetype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_packetizetype());
  }

  // uint64 packetNumber = 10;
  if (this->_internal_packetnumber() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_packetnumber());
  }

  // uint32 priorityLevel = 13;
  if (this->_internal_prioritylevel() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_prioritylevel());
  }

  // uint64 packetCount = 11;
  if (this->_internal_packetcount() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_packetcount());
  }

  // uint64 frameSize = 12;
  if (this->_internal_framesize() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_framesize());
  }

  switch (header_case()) {
    // .media_message.MediaDataHeader.Audio audio_header = 7;
    case kAudioHeader: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_.audio_header_);
      break;
    }
    // .media_message.MediaDataHeader.Video video_header = 8;
    case kVideoHeader: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_.video_header_);
      break;
    }
    case HEADER_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MediaDataHeader::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MediaDataHeader::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MediaDataHeader::GetClassData() const { return &_class_data_; }

void MediaDataHeader::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MediaDataHeader *>(to)->MergeFrom(
      static_cast<const MediaDataHeader &>(from));
}


void MediaDataHeader::MergeFrom(const MediaDataHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:media_message.MediaDataHeader)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_sourceid() != 0) {
    _internal_set_sourceid(from._internal_sourceid());
  }
  if (from._internal_sourcerecordtime() != 0) {
    _internal_set_sourcerecordtime(from._internal_sourcerecordtime());
  }
  if (from._internal_sequencenumber() != 0) {
    _internal_set_sequencenumber(from._internal_sequencenumber());
  }
  if (from._internal_mediatype() != 0) {
    _internal_set_mediatype(from._internal_mediatype());
  }
  if (from._internal_packetizetype() != 0) {
    _internal_set_packetizetype(from._internal_packetizetype());
  }
  if (from._internal_packetnumber() != 0) {
    _internal_set_packetnumber(from._internal_packetnumber());
  }
  if (from._internal_prioritylevel() != 0) {
    _internal_set_prioritylevel(from._internal_prioritylevel());
  }
  if (from._internal_packetcount() != 0) {
    _internal_set_packetcount(from._internal_packetcount());
  }
  if (from._internal_framesize() != 0) {
    _internal_set_framesize(from._internal_framesize());
  }
  switch (from.header_case()) {
    case kAudioHeader: {
      _internal_mutable_audio_header()->::media_message::MediaDataHeader_Audio::MergeFrom(from._internal_audio_header());
      break;
    }
    case kVideoHeader: {
      _internal_mutable_video_header()->::media_message::MediaDataHeader_Video::MergeFrom(from._internal_video_header());
      break;
    }
    case HEADER_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MediaDataHeader::CopyFrom(const MediaDataHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:media_message.MediaDataHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaDataHeader::IsInitialized() const {
  return true;
}

void MediaDataHeader::InternalSwap(MediaDataHeader* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MediaDataHeader, framesize_)
      + sizeof(MediaDataHeader::framesize_)
      - PROTOBUF_FIELD_OFFSET(MediaDataHeader, sourceid_)>(
          reinterpret_cast<char*>(&sourceid_),
          reinterpret_cast<char*>(&other->sourceid_));
  swap(header_, other->header_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MediaDataHeader::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_media_2eproto_getter, &descriptor_table_media_2eproto_once,
      file_level_metadata_media_2eproto[2]);
}

// ===================================================================

class MediaData::_Internal {
 public:
  static const ::media_message::MediaDataHeader& header(const MediaData* msg);
};

const ::media_message::MediaDataHeader&
MediaData::_Internal::header(const MediaData* msg) {
  return *msg->header_;
}
MediaData::MediaData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:media_message.MediaData)
}
MediaData::MediaData(const MediaData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  encryptedmediadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_encryptedmediadata().empty()) {
    encryptedmediadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_encryptedmediadata(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_header()) {
    header_ = new ::media_message::MediaDataHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:media_message.MediaData)
}

void MediaData::SharedCtor() {
encryptedmediadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
header_ = nullptr;
}

MediaData::~MediaData() {
  // @@protoc_insertion_point(destructor:media_message.MediaData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MediaData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  encryptedmediadata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void MediaData::ArenaDtor(void* object) {
  MediaData* _this = reinterpret_cast< MediaData* >(object);
  (void)_this;
}
void MediaData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MediaData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MediaData::Clear() {
// @@protoc_insertion_point(message_clear_start:media_message.MediaData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  encryptedmediadata_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MediaData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .media_message.MediaDataHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes encryptedMediaData = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_encryptedmediadata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MediaData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:media_message.MediaData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .media_message.MediaDataHeader header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // bytes encryptedMediaData = 2;
  if (!this->_internal_encryptedmediadata().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_encryptedmediadata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:media_message.MediaData)
  return target;
}

size_t MediaData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:media_message.MediaData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes encryptedMediaData = 2;
  if (!this->_internal_encryptedmediadata().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_encryptedmediadata());
  }

  // .media_message.MediaDataHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MediaData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MediaData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MediaData::GetClassData() const { return &_class_data_; }

void MediaData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MediaData *>(to)->MergeFrom(
      static_cast<const MediaData &>(from));
}


void MediaData::MergeFrom(const MediaData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:media_message.MediaData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_encryptedmediadata().empty()) {
    _internal_set_encryptedmediadata(from._internal_encryptedmediadata());
  }
  if (from._internal_has_header()) {
    _internal_mutable_header()->::media_message::MediaDataHeader::MergeFrom(from._internal_header());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MediaData::CopyFrom(const MediaData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:media_message.MediaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaData::IsInitialized() const {
  return true;
}

void MediaData::InternalSwap(MediaData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &encryptedmediadata_, lhs_arena,
      &other->encryptedmediadata_, rhs_arena
  );
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MediaData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_media_2eproto_getter, &descriptor_table_media_2eproto_once,
      file_level_metadata_media_2eproto[3]);
}

// ===================================================================

class StreamMessage_Join::_Internal {
 public:
};

StreamMessage_Join::StreamMessage_Join(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:media_message.StreamMessage.Join)
}
StreamMessage_Join::StreamMessage_Join(const StreamMessage_Join& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  echo_ = from.echo_;
  // @@protoc_insertion_point(copy_constructor:media_message.StreamMessage.Join)
}

void StreamMessage_Join::SharedCtor() {
echo_ = false;
}

StreamMessage_Join::~StreamMessage_Join() {
  // @@protoc_insertion_point(destructor:media_message.StreamMessage.Join)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StreamMessage_Join::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StreamMessage_Join::ArenaDtor(void* object) {
  StreamMessage_Join* _this = reinterpret_cast< StreamMessage_Join* >(object);
  (void)_this;
}
void StreamMessage_Join::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StreamMessage_Join::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StreamMessage_Join::Clear() {
// @@protoc_insertion_point(message_clear_start:media_message.StreamMessage.Join)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  echo_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamMessage_Join::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool echo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          echo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamMessage_Join::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:media_message.StreamMessage.Join)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool echo = 1;
  if (this->_internal_echo() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_echo(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:media_message.StreamMessage.Join)
  return target;
}

size_t StreamMessage_Join::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:media_message.StreamMessage.Join)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool echo = 1;
  if (this->_internal_echo() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamMessage_Join::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StreamMessage_Join::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamMessage_Join::GetClassData() const { return &_class_data_; }

void StreamMessage_Join::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StreamMessage_Join *>(to)->MergeFrom(
      static_cast<const StreamMessage_Join &>(from));
}


void StreamMessage_Join::MergeFrom(const StreamMessage_Join& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:media_message.StreamMessage.Join)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_echo() != 0) {
    _internal_set_echo(from._internal_echo());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamMessage_Join::CopyFrom(const StreamMessage_Join& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:media_message.StreamMessage.Join)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamMessage_Join::IsInitialized() const {
  return true;
}

void StreamMessage_Join::InternalSwap(StreamMessage_Join* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(echo_, other->echo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamMessage_Join::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_media_2eproto_getter, &descriptor_table_media_2eproto_once,
      file_level_metadata_media_2eproto[4]);
}

// ===================================================================

class StreamMessage_JoinAck::_Internal {
 public:
};

StreamMessage_JoinAck::StreamMessage_JoinAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:media_message.StreamMessage.JoinAck)
}
StreamMessage_JoinAck::StreamMessage_JoinAck(const StreamMessage_JoinAck& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:media_message.StreamMessage.JoinAck)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamMessage_JoinAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamMessage_JoinAck::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata StreamMessage_JoinAck::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_media_2eproto_getter, &descriptor_table_media_2eproto_once,
      file_level_metadata_media_2eproto[5]);
}

// ===================================================================

class StreamMessage_IdrRequest::_Internal {
 public:
};

StreamMessage_IdrRequest::StreamMessage_IdrRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:media_message.StreamMessage.IdrRequest)
}
StreamMessage_IdrRequest::StreamMessage_IdrRequest(const StreamMessage_IdrRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&client_id_, &from.client_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&source_timestamp_) -
    reinterpret_cast<char*>(&client_id_)) + sizeof(source_timestamp_));
  // @@protoc_insertion_point(copy_constructor:media_message.StreamMessage.IdrRequest)
}

void StreamMessage_IdrRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&client_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&source_timestamp_) -
    reinterpret_cast<char*>(&client_id_)) + sizeof(source_timestamp_));
}

StreamMessage_IdrRequest::~StreamMessage_IdrRequest() {
  // @@protoc_insertion_point(destructor:media_message.StreamMessage.IdrRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StreamMessage_IdrRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StreamMessage_IdrRequest::ArenaDtor(void* object) {
  StreamMessage_IdrRequest* _this = reinterpret_cast< StreamMessage_IdrRequest* >(object);
  (void)_this;
}
void StreamMessage_IdrRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StreamMessage_IdrRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StreamMessage_IdrRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:media_message.StreamMessage.IdrRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&client_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&source_timestamp_) -
      reinterpret_cast<char*>(&client_id_)) + sizeof(source_timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamMessage_IdrRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          client_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 source_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          source_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 source_timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          source_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamMessage_IdrRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:media_message.StreamMessage.IdrRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 client_id = 1;
  if (this->_internal_client_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_client_id(), target);
  }

  // uint64 source_id = 2;
  if (this->_internal_source_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_source_id(), target);
  }

  // uint64 source_timestamp = 3;
  if (this->_internal_source_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_source_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:media_message.StreamMessage.IdrRequest)
  return target;
}

size_t StreamMessage_IdrRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:media_message.StreamMessage.IdrRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 client_id = 1;
  if (this->_internal_client_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_client_id());
  }

  // uint64 source_id = 2;
  if (this->_internal_source_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_source_id());
  }

  // uint64 source_timestamp = 3;
  if (this->_internal_source_timestamp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_source_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamMessage_IdrRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StreamMessage_IdrRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamMessage_IdrRequest::GetClassData() const { return &_class_data_; }

void StreamMessage_IdrRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StreamMessage_IdrRequest *>(to)->MergeFrom(
      static_cast<const StreamMessage_IdrRequest &>(from));
}


void StreamMessage_IdrRequest::MergeFrom(const StreamMessage_IdrRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:media_message.StreamMessage.IdrRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_client_id() != 0) {
    _internal_set_client_id(from._internal_client_id());
  }
  if (from._internal_source_id() != 0) {
    _internal_set_source_id(from._internal_source_id());
  }
  if (from._internal_source_timestamp() != 0) {
    _internal_set_source_timestamp(from._internal_source_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamMessage_IdrRequest::CopyFrom(const StreamMessage_IdrRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:media_message.StreamMessage.IdrRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamMessage_IdrRequest::IsInitialized() const {
  return true;
}

void StreamMessage_IdrRequest::InternalSwap(StreamMessage_IdrRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StreamMessage_IdrRequest, source_timestamp_)
      + sizeof(StreamMessage_IdrRequest::source_timestamp_)
      - PROTOBUF_FIELD_OFFSET(StreamMessage_IdrRequest, client_id_)>(
          reinterpret_cast<char*>(&client_id_),
          reinterpret_cast<char*>(&other->client_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamMessage_IdrRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_media_2eproto_getter, &descriptor_table_media_2eproto_once,
      file_level_metadata_media_2eproto[6]);
}

// ===================================================================

class StreamMessage_StreamContent::_Internal {
 public:
};

StreamMessage_StreamContent::StreamMessage_StreamContent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  mediadata_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:media_message.StreamMessage.StreamContent)
}
StreamMessage_StreamContent::StreamMessage_StreamContent(const StreamMessage_StreamContent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      mediadata_(from.mediadata_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:media_message.StreamMessage.StreamContent)
}

void StreamMessage_StreamContent::SharedCtor() {
}

StreamMessage_StreamContent::~StreamMessage_StreamContent() {
  // @@protoc_insertion_point(destructor:media_message.StreamMessage.StreamContent)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StreamMessage_StreamContent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StreamMessage_StreamContent::ArenaDtor(void* object) {
  StreamMessage_StreamContent* _this = reinterpret_cast< StreamMessage_StreamContent* >(object);
  (void)_this;
}
void StreamMessage_StreamContent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StreamMessage_StreamContent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StreamMessage_StreamContent::Clear() {
// @@protoc_insertion_point(message_clear_start:media_message.StreamMessage.StreamContent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mediadata_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamMessage_StreamContent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .media_message.MediaData mediaData = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mediadata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamMessage_StreamContent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:media_message.StreamMessage.StreamContent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .media_message.MediaData mediaData = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_mediadata_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_mediadata(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:media_message.StreamMessage.StreamContent)
  return target;
}

size_t StreamMessage_StreamContent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:media_message.StreamMessage.StreamContent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .media_message.MediaData mediaData = 1;
  total_size += 1UL * this->_internal_mediadata_size();
  for (const auto& msg : this->mediadata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamMessage_StreamContent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StreamMessage_StreamContent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamMessage_StreamContent::GetClassData() const { return &_class_data_; }

void StreamMessage_StreamContent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StreamMessage_StreamContent *>(to)->MergeFrom(
      static_cast<const StreamMessage_StreamContent &>(from));
}


void StreamMessage_StreamContent::MergeFrom(const StreamMessage_StreamContent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:media_message.StreamMessage.StreamContent)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mediadata_.MergeFrom(from.mediadata_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamMessage_StreamContent::CopyFrom(const StreamMessage_StreamContent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:media_message.StreamMessage.StreamContent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamMessage_StreamContent::IsInitialized() const {
  return true;
}

void StreamMessage_StreamContent::InternalSwap(StreamMessage_StreamContent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  mediadata_.InternalSwap(&other->mediadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamMessage_StreamContent::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_media_2eproto_getter, &descriptor_table_media_2eproto_once,
      file_level_metadata_media_2eproto[7]);
}

// ===================================================================

class StreamMessage_StreamContentAck::_Internal {
 public:
};

StreamMessage_StreamContentAck::StreamMessage_StreamContentAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:media_message.StreamMessage.StreamContentAck)
}
StreamMessage_StreamContentAck::StreamMessage_StreamContentAck(const StreamMessage_StreamContentAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  stream_seq_num_ = from.stream_seq_num_;
  // @@protoc_insertion_point(copy_constructor:media_message.StreamMessage.StreamContentAck)
}

void StreamMessage_StreamContentAck::SharedCtor() {
stream_seq_num_ = uint64_t{0u};
}

StreamMessage_StreamContentAck::~StreamMessage_StreamContentAck() {
  // @@protoc_insertion_point(destructor:media_message.StreamMessage.StreamContentAck)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StreamMessage_StreamContentAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StreamMessage_StreamContentAck::ArenaDtor(void* object) {
  StreamMessage_StreamContentAck* _this = reinterpret_cast< StreamMessage_StreamContentAck* >(object);
  (void)_this;
}
void StreamMessage_StreamContentAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StreamMessage_StreamContentAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StreamMessage_StreamContentAck::Clear() {
// @@protoc_insertion_point(message_clear_start:media_message.StreamMessage.StreamContentAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stream_seq_num_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamMessage_StreamContentAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 stream_seq_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          stream_seq_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamMessage_StreamContentAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:media_message.StreamMessage.StreamContentAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 stream_seq_num = 1;
  if (this->_internal_stream_seq_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_stream_seq_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:media_message.StreamMessage.StreamContentAck)
  return target;
}

size_t StreamMessage_StreamContentAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:media_message.StreamMessage.StreamContentAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 stream_seq_num = 1;
  if (this->_internal_stream_seq_num() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_stream_seq_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamMessage_StreamContentAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StreamMessage_StreamContentAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamMessage_StreamContentAck::GetClassData() const { return &_class_data_; }

void StreamMessage_StreamContentAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StreamMessage_StreamContentAck *>(to)->MergeFrom(
      static_cast<const StreamMessage_StreamContentAck &>(from));
}


void StreamMessage_StreamContentAck::MergeFrom(const StreamMessage_StreamContentAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:media_message.StreamMessage.StreamContentAck)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_stream_seq_num() != 0) {
    _internal_set_stream_seq_num(from._internal_stream_seq_num());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamMessage_StreamContentAck::CopyFrom(const StreamMessage_StreamContentAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:media_message.StreamMessage.StreamContentAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamMessage_StreamContentAck::IsInitialized() const {
  return true;
}

void StreamMessage_StreamContentAck::InternalSwap(StreamMessage_StreamContentAck* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(stream_seq_num_, other->stream_seq_num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamMessage_StreamContentAck::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_media_2eproto_getter, &descriptor_table_media_2eproto_once,
      file_level_metadata_media_2eproto[8]);
}

// ===================================================================

class StreamMessage_StreamContentNack_Ack::_Internal {
 public:
};

StreamMessage_StreamContentNack_Ack::StreamMessage_StreamContentNack_Ack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:media_message.StreamMessage.StreamContentNack.Ack)
}
StreamMessage_StreamContentNack_Ack::StreamMessage_StreamContentNack_Ack(const StreamMessage_StreamContentNack_Ack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&sequencenumber_, &from.sequencenumber_,
    static_cast<size_t>(reinterpret_cast<char*>(&mediatype_) -
    reinterpret_cast<char*>(&sequencenumber_)) + sizeof(mediatype_));
  // @@protoc_insertion_point(copy_constructor:media_message.StreamMessage.StreamContentNack.Ack)
}

void StreamMessage_StreamContentNack_Ack::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sequencenumber_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&mediatype_) -
    reinterpret_cast<char*>(&sequencenumber_)) + sizeof(mediatype_));
}

StreamMessage_StreamContentNack_Ack::~StreamMessage_StreamContentNack_Ack() {
  // @@protoc_insertion_point(destructor:media_message.StreamMessage.StreamContentNack.Ack)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StreamMessage_StreamContentNack_Ack::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StreamMessage_StreamContentNack_Ack::ArenaDtor(void* object) {
  StreamMessage_StreamContentNack_Ack* _this = reinterpret_cast< StreamMessage_StreamContentNack_Ack* >(object);
  (void)_this;
}
void StreamMessage_StreamContentNack_Ack::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StreamMessage_StreamContentNack_Ack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StreamMessage_StreamContentNack_Ack::Clear() {
// @@protoc_insertion_point(message_clear_start:media_message.StreamMessage.StreamContentNack.Ack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&sequencenumber_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mediatype_) -
      reinterpret_cast<char*>(&sequencenumber_)) + sizeof(mediatype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamMessage_StreamContentNack_Ack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 sequenceNumber = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sequencenumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // fixed64 senderTimeMs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          sendertimems_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else
          goto handle_unusual;
        continue;
      // fixed64 receiverTimeMs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          receivertimems_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else
          goto handle_unusual;
        continue;
      // uint32 packetSize = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          packetsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .media_message.MediaType mediaType = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mediatype(static_cast<::media_message::MediaType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamMessage_StreamContentNack_Ack::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:media_message.StreamMessage.StreamContentNack.Ack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 sequenceNumber = 1;
  if (this->_internal_sequencenumber() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_sequencenumber(), target);
  }

  // fixed64 senderTimeMs = 2;
  if (this->_internal_sendertimems() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_sendertimems(), target);
  }

  // fixed64 receiverTimeMs = 3;
  if (this->_internal_receivertimems() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_receivertimems(), target);
  }

  // uint32 packetSize = 4;
  if (this->_internal_packetsize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_packetsize(), target);
  }

  // .media_message.MediaType mediaType = 5;
  if (this->_internal_mediatype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_mediatype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:media_message.StreamMessage.StreamContentNack.Ack)
  return target;
}

size_t StreamMessage_StreamContentNack_Ack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:media_message.StreamMessage.StreamContentNack.Ack)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 sequenceNumber = 1;
  if (this->_internal_sequencenumber() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_sequencenumber());
  }

  // fixed64 senderTimeMs = 2;
  if (this->_internal_sendertimems() != 0) {
    total_size += 1 + 8;
  }

  // fixed64 receiverTimeMs = 3;
  if (this->_internal_receivertimems() != 0) {
    total_size += 1 + 8;
  }

  // uint32 packetSize = 4;
  if (this->_internal_packetsize() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_packetsize());
  }

  // .media_message.MediaType mediaType = 5;
  if (this->_internal_mediatype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mediatype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamMessage_StreamContentNack_Ack::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StreamMessage_StreamContentNack_Ack::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamMessage_StreamContentNack_Ack::GetClassData() const { return &_class_data_; }

void StreamMessage_StreamContentNack_Ack::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StreamMessage_StreamContentNack_Ack *>(to)->MergeFrom(
      static_cast<const StreamMessage_StreamContentNack_Ack &>(from));
}


void StreamMessage_StreamContentNack_Ack::MergeFrom(const StreamMessage_StreamContentNack_Ack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:media_message.StreamMessage.StreamContentNack.Ack)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_sequencenumber() != 0) {
    _internal_set_sequencenumber(from._internal_sequencenumber());
  }
  if (from._internal_sendertimems() != 0) {
    _internal_set_sendertimems(from._internal_sendertimems());
  }
  if (from._internal_receivertimems() != 0) {
    _internal_set_receivertimems(from._internal_receivertimems());
  }
  if (from._internal_packetsize() != 0) {
    _internal_set_packetsize(from._internal_packetsize());
  }
  if (from._internal_mediatype() != 0) {
    _internal_set_mediatype(from._internal_mediatype());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamMessage_StreamContentNack_Ack::CopyFrom(const StreamMessage_StreamContentNack_Ack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:media_message.StreamMessage.StreamContentNack.Ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamMessage_StreamContentNack_Ack::IsInitialized() const {
  return true;
}

void StreamMessage_StreamContentNack_Ack::InternalSwap(StreamMessage_StreamContentNack_Ack* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StreamMessage_StreamContentNack_Ack, mediatype_)
      + sizeof(StreamMessage_StreamContentNack_Ack::mediatype_)
      - PROTOBUF_FIELD_OFFSET(StreamMessage_StreamContentNack_Ack, sequencenumber_)>(
          reinterpret_cast<char*>(&sequencenumber_),
          reinterpret_cast<char*>(&other->sequencenumber_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamMessage_StreamContentNack_Ack::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_media_2eproto_getter, &descriptor_table_media_2eproto_once,
      file_level_metadata_media_2eproto[9]);
}

// ===================================================================

class StreamMessage_StreamContentNack::_Internal {
 public:
};

StreamMessage_StreamContentNack::StreamMessage_StreamContentNack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  nacksequencenumber_(arena),
  acks_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:media_message.StreamMessage.StreamContentNack)
}
StreamMessage_StreamContentNack::StreamMessage_StreamContentNack(const StreamMessage_StreamContentNack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      nacksequencenumber_(from.nacksequencenumber_),
      acks_(from.acks_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sourceuserid_ = from.sourceuserid_;
  // @@protoc_insertion_point(copy_constructor:media_message.StreamMessage.StreamContentNack)
}

void StreamMessage_StreamContentNack::SharedCtor() {
sourceuserid_ = uint64_t{0u};
}

StreamMessage_StreamContentNack::~StreamMessage_StreamContentNack() {
  // @@protoc_insertion_point(destructor:media_message.StreamMessage.StreamContentNack)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StreamMessage_StreamContentNack::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StreamMessage_StreamContentNack::ArenaDtor(void* object) {
  StreamMessage_StreamContentNack* _this = reinterpret_cast< StreamMessage_StreamContentNack* >(object);
  (void)_this;
}
void StreamMessage_StreamContentNack::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StreamMessage_StreamContentNack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StreamMessage_StreamContentNack::Clear() {
// @@protoc_insertion_point(message_clear_start:media_message.StreamMessage.StreamContentNack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nacksequencenumber_.Clear();
  acks_.Clear();
  sourceuserid_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamMessage_StreamContentNack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 sourceUserID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sourceuserid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 nackSequenceNumber = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_nacksequencenumber(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_nacksequencenumber(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .media_message.StreamMessage.StreamContentNack.Ack acks = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_acks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamMessage_StreamContentNack::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:media_message.StreamMessage.StreamContentNack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 sourceUserID = 1;
  if (this->_internal_sourceuserid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_sourceuserid(), target);
  }

  // repeated uint64 nackSequenceNumber = 2;
  {
    int byte_size = _nacksequencenumber_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          2, _internal_nacksequencenumber(), byte_size, target);
    }
  }

  // repeated .media_message.StreamMessage.StreamContentNack.Ack acks = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_acks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_acks(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:media_message.StreamMessage.StreamContentNack)
  return target;
}

size_t StreamMessage_StreamContentNack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:media_message.StreamMessage.StreamContentNack)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 nackSequenceNumber = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->nacksequencenumber_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _nacksequencenumber_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .media_message.StreamMessage.StreamContentNack.Ack acks = 3;
  total_size += 1UL * this->_internal_acks_size();
  for (const auto& msg : this->acks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 sourceUserID = 1;
  if (this->_internal_sourceuserid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_sourceuserid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamMessage_StreamContentNack::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StreamMessage_StreamContentNack::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamMessage_StreamContentNack::GetClassData() const { return &_class_data_; }

void StreamMessage_StreamContentNack::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StreamMessage_StreamContentNack *>(to)->MergeFrom(
      static_cast<const StreamMessage_StreamContentNack &>(from));
}


void StreamMessage_StreamContentNack::MergeFrom(const StreamMessage_StreamContentNack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:media_message.StreamMessage.StreamContentNack)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nacksequencenumber_.MergeFrom(from.nacksequencenumber_);
  acks_.MergeFrom(from.acks_);
  if (from._internal_sourceuserid() != 0) {
    _internal_set_sourceuserid(from._internal_sourceuserid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamMessage_StreamContentNack::CopyFrom(const StreamMessage_StreamContentNack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:media_message.StreamMessage.StreamContentNack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamMessage_StreamContentNack::IsInitialized() const {
  return true;
}

void StreamMessage_StreamContentNack::InternalSwap(StreamMessage_StreamContentNack* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  nacksequencenumber_.InternalSwap(&other->nacksequencenumber_);
  acks_.InternalSwap(&other->acks_);
  swap(sourceuserid_, other->sourceuserid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamMessage_StreamContentNack::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_media_2eproto_getter, &descriptor_table_media_2eproto_once,
      file_level_metadata_media_2eproto[10]);
}

// ===================================================================

class StreamMessage::_Internal {
 public:
  static const ::media_message::StreamMessage_StreamContent& stream_content(const StreamMessage* msg);
  static const ::media_message::StreamMessage_StreamContentNack& stream_content_nack(const StreamMessage* msg);
  static const ::media_message::StreamMessage_StreamContentAck& stream_content_ack(const StreamMessage* msg);
  static const ::media_message::StreamMessage_Join& join(const StreamMessage* msg);
  static const ::media_message::StreamMessage_JoinAck& join_ack(const StreamMessage* msg);
  static const ::media_message::StreamMessage_IdrRequest& idr_request(const StreamMessage* msg);
};

const ::media_message::StreamMessage_StreamContent&
StreamMessage::_Internal::stream_content(const StreamMessage* msg) {
  return *msg->payload_.stream_content_;
}
const ::media_message::StreamMessage_StreamContentNack&
StreamMessage::_Internal::stream_content_nack(const StreamMessage* msg) {
  return *msg->payload_.stream_content_nack_;
}
const ::media_message::StreamMessage_StreamContentAck&
StreamMessage::_Internal::stream_content_ack(const StreamMessage* msg) {
  return *msg->payload_.stream_content_ack_;
}
const ::media_message::StreamMessage_Join&
StreamMessage::_Internal::join(const StreamMessage* msg) {
  return *msg->payload_.join_;
}
const ::media_message::StreamMessage_JoinAck&
StreamMessage::_Internal::join_ack(const StreamMessage* msg) {
  return *msg->payload_.join_ack_;
}
const ::media_message::StreamMessage_IdrRequest&
StreamMessage::_Internal::idr_request(const StreamMessage* msg) {
  return *msg->payload_.idr_request_;
}
void StreamMessage::set_allocated_stream_content(::media_message::StreamMessage_StreamContent* stream_content) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (stream_content) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::media_message::StreamMessage_StreamContent>::GetOwningArena(stream_content);
    if (message_arena != submessage_arena) {
      stream_content = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stream_content, submessage_arena);
    }
    set_has_stream_content();
    payload_.stream_content_ = stream_content;
  }
  // @@protoc_insertion_point(field_set_allocated:media_message.StreamMessage.stream_content)
}
void StreamMessage::set_allocated_stream_content_nack(::media_message::StreamMessage_StreamContentNack* stream_content_nack) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (stream_content_nack) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::media_message::StreamMessage_StreamContentNack>::GetOwningArena(stream_content_nack);
    if (message_arena != submessage_arena) {
      stream_content_nack = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stream_content_nack, submessage_arena);
    }
    set_has_stream_content_nack();
    payload_.stream_content_nack_ = stream_content_nack;
  }
  // @@protoc_insertion_point(field_set_allocated:media_message.StreamMessage.stream_content_nack)
}
void StreamMessage::set_allocated_stream_content_ack(::media_message::StreamMessage_StreamContentAck* stream_content_ack) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (stream_content_ack) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::media_message::StreamMessage_StreamContentAck>::GetOwningArena(stream_content_ack);
    if (message_arena != submessage_arena) {
      stream_content_ack = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stream_content_ack, submessage_arena);
    }
    set_has_stream_content_ack();
    payload_.stream_content_ack_ = stream_content_ack;
  }
  // @@protoc_insertion_point(field_set_allocated:media_message.StreamMessage.stream_content_ack)
}
void StreamMessage::set_allocated_join(::media_message::StreamMessage_Join* join) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (join) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::media_message::StreamMessage_Join>::GetOwningArena(join);
    if (message_arena != submessage_arena) {
      join = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, join, submessage_arena);
    }
    set_has_join();
    payload_.join_ = join;
  }
  // @@protoc_insertion_point(field_set_allocated:media_message.StreamMessage.join)
}
void StreamMessage::set_allocated_join_ack(::media_message::StreamMessage_JoinAck* join_ack) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (join_ack) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::media_message::StreamMessage_JoinAck>::GetOwningArena(join_ack);
    if (message_arena != submessage_arena) {
      join_ack = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, join_ack, submessage_arena);
    }
    set_has_join_ack();
    payload_.join_ack_ = join_ack;
  }
  // @@protoc_insertion_point(field_set_allocated:media_message.StreamMessage.join_ack)
}
void StreamMessage::set_allocated_idr_request(::media_message::StreamMessage_IdrRequest* idr_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (idr_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::media_message::StreamMessage_IdrRequest>::GetOwningArena(idr_request);
    if (message_arena != submessage_arena) {
      idr_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, idr_request, submessage_arena);
    }
    set_has_idr_request();
    payload_.idr_request_ = idr_request;
  }
  // @@protoc_insertion_point(field_set_allocated:media_message.StreamMessage.idr_request)
}
StreamMessage::StreamMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:media_message.StreamMessage)
}
StreamMessage::StreamMessage(const StreamMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&conference_id_, &from.conference_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&retransmitted_) -
    reinterpret_cast<char*>(&conference_id_)) + sizeof(retransmitted_));
  clear_has_payload();
  switch (from.payload_case()) {
    case kStreamContent: {
      _internal_mutable_stream_content()->::media_message::StreamMessage_StreamContent::MergeFrom(from._internal_stream_content());
      break;
    }
    case kStreamContentNack: {
      _internal_mutable_stream_content_nack()->::media_message::StreamMessage_StreamContentNack::MergeFrom(from._internal_stream_content_nack());
      break;
    }
    case kStreamContentAck: {
      _internal_mutable_stream_content_ack()->::media_message::StreamMessage_StreamContentAck::MergeFrom(from._internal_stream_content_ack());
      break;
    }
    case kJoin: {
      _internal_mutable_join()->::media_message::StreamMessage_Join::MergeFrom(from._internal_join());
      break;
    }
    case kJoinAck: {
      _internal_mutable_join_ack()->::media_message::StreamMessage_JoinAck::MergeFrom(from._internal_join_ack());
      break;
    }
    case kIdrRequest: {
      _internal_mutable_idr_request()->::media_message::StreamMessage_IdrRequest::MergeFrom(from._internal_idr_request());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:media_message.StreamMessage)
}

void StreamMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&conference_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&retransmitted_) -
    reinterpret_cast<char*>(&conference_id_)) + sizeof(retransmitted_));
clear_has_payload();
}

StreamMessage::~StreamMessage() {
  // @@protoc_insertion_point(destructor:media_message.StreamMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StreamMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_payload()) {
    clear_payload();
  }
}

void StreamMessage::ArenaDtor(void* object) {
  StreamMessage* _this = reinterpret_cast< StreamMessage* >(object);
  (void)_this;
}
void StreamMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StreamMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StreamMessage::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:media_message.StreamMessage)
  switch (payload_case()) {
    case kStreamContent: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.stream_content_;
      }
      break;
    }
    case kStreamContentNack: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.stream_content_nack_;
      }
      break;
    }
    case kStreamContentAck: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.stream_content_ack_;
      }
      break;
    }
    case kJoin: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.join_;
      }
      break;
    }
    case kJoinAck: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.join_ack_;
      }
      break;
    }
    case kIdrRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.idr_request_;
      }
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}


void StreamMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:media_message.StreamMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&conference_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retransmitted_) -
      reinterpret_cast<char*>(&conference_id_)) + sizeof(retransmitted_));
  clear_payload();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 conference_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          conference_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 client_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          client_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 transport_seq_num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          transport_seq_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .media_message.StreamMessage.StreamContent stream_content = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream_content(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .media_message.StreamMessage.StreamContentNack stream_content_nack = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream_content_nack(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .media_message.StreamMessage.Join join = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_join(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .media_message.StreamMessage.JoinAck join_ack = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_join_ack(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .media_message.StreamMessage.StreamContentAck stream_content_ack = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream_content_ack(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .media_message.StreamMessage.IdrRequest idr_request = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_idr_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool retransmitted = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          retransmitted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:media_message.StreamMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 conference_id = 1;
  if (this->_internal_conference_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_conference_id(), target);
  }

  // uint64 client_id = 2;
  if (this->_internal_client_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_client_id(), target);
  }

  // uint64 transport_seq_num = 3;
  if (this->_internal_transport_seq_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_transport_seq_num(), target);
  }

  // .media_message.StreamMessage.StreamContent stream_content = 5;
  if (_internal_has_stream_content()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::stream_content(this), target, stream);
  }

  // .media_message.StreamMessage.StreamContentNack stream_content_nack = 6;
  if (_internal_has_stream_content_nack()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::stream_content_nack(this), target, stream);
  }

  // .media_message.StreamMessage.Join join = 7;
  if (_internal_has_join()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::join(this), target, stream);
  }

  // .media_message.StreamMessage.JoinAck join_ack = 8;
  if (_internal_has_join_ack()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::join_ack(this), target, stream);
  }

  // .media_message.StreamMessage.StreamContentAck stream_content_ack = 9;
  if (_internal_has_stream_content_ack()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::stream_content_ack(this), target, stream);
  }

  // .media_message.StreamMessage.IdrRequest idr_request = 10;
  if (_internal_has_idr_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::idr_request(this), target, stream);
  }

  // bool retransmitted = 15;
  if (this->_internal_retransmitted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_retransmitted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:media_message.StreamMessage)
  return target;
}

size_t StreamMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:media_message.StreamMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 conference_id = 1;
  if (this->_internal_conference_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_conference_id());
  }

  // uint64 client_id = 2;
  if (this->_internal_client_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_client_id());
  }

  // uint64 transport_seq_num = 3;
  if (this->_internal_transport_seq_num() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_transport_seq_num());
  }

  // bool retransmitted = 15;
  if (this->_internal_retransmitted() != 0) {
    total_size += 1 + 1;
  }

  switch (payload_case()) {
    // .media_message.StreamMessage.StreamContent stream_content = 5;
    case kStreamContent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.stream_content_);
      break;
    }
    // .media_message.StreamMessage.StreamContentNack stream_content_nack = 6;
    case kStreamContentNack: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.stream_content_nack_);
      break;
    }
    // .media_message.StreamMessage.StreamContentAck stream_content_ack = 9;
    case kStreamContentAck: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.stream_content_ack_);
      break;
    }
    // .media_message.StreamMessage.Join join = 7;
    case kJoin: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.join_);
      break;
    }
    // .media_message.StreamMessage.JoinAck join_ack = 8;
    case kJoinAck: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.join_ack_);
      break;
    }
    // .media_message.StreamMessage.IdrRequest idr_request = 10;
    case kIdrRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.idr_request_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StreamMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamMessage::GetClassData() const { return &_class_data_; }

void StreamMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StreamMessage *>(to)->MergeFrom(
      static_cast<const StreamMessage &>(from));
}


void StreamMessage::MergeFrom(const StreamMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:media_message.StreamMessage)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_conference_id() != 0) {
    _internal_set_conference_id(from._internal_conference_id());
  }
  if (from._internal_client_id() != 0) {
    _internal_set_client_id(from._internal_client_id());
  }
  if (from._internal_transport_seq_num() != 0) {
    _internal_set_transport_seq_num(from._internal_transport_seq_num());
  }
  if (from._internal_retransmitted() != 0) {
    _internal_set_retransmitted(from._internal_retransmitted());
  }
  switch (from.payload_case()) {
    case kStreamContent: {
      _internal_mutable_stream_content()->::media_message::StreamMessage_StreamContent::MergeFrom(from._internal_stream_content());
      break;
    }
    case kStreamContentNack: {
      _internal_mutable_stream_content_nack()->::media_message::StreamMessage_StreamContentNack::MergeFrom(from._internal_stream_content_nack());
      break;
    }
    case kStreamContentAck: {
      _internal_mutable_stream_content_ack()->::media_message::StreamMessage_StreamContentAck::MergeFrom(from._internal_stream_content_ack());
      break;
    }
    case kJoin: {
      _internal_mutable_join()->::media_message::StreamMessage_Join::MergeFrom(from._internal_join());
      break;
    }
    case kJoinAck: {
      _internal_mutable_join_ack()->::media_message::StreamMessage_JoinAck::MergeFrom(from._internal_join_ack());
      break;
    }
    case kIdrRequest: {
      _internal_mutable_idr_request()->::media_message::StreamMessage_IdrRequest::MergeFrom(from._internal_idr_request());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamMessage::CopyFrom(const StreamMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:media_message.StreamMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamMessage::IsInitialized() const {
  return true;
}

void StreamMessage::InternalSwap(StreamMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StreamMessage, retransmitted_)
      + sizeof(StreamMessage::retransmitted_)
      - PROTOBUF_FIELD_OFFSET(StreamMessage, conference_id_)>(
          reinterpret_cast<char*>(&conference_id_),
          reinterpret_cast<char*>(&other->conference_id_));
  swap(payload_, other->payload_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_media_2eproto_getter, &descriptor_table_media_2eproto_once,
      file_level_metadata_media_2eproto[11]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace media_message
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::media_message::MediaDataHeader_Audio* Arena::CreateMaybeMessage< ::media_message::MediaDataHeader_Audio >(Arena* arena) {
  return Arena::CreateMessageInternal< ::media_message::MediaDataHeader_Audio >(arena);
}
template<> PROTOBUF_NOINLINE ::media_message::MediaDataHeader_Video* Arena::CreateMaybeMessage< ::media_message::MediaDataHeader_Video >(Arena* arena) {
  return Arena::CreateMessageInternal< ::media_message::MediaDataHeader_Video >(arena);
}
template<> PROTOBUF_NOINLINE ::media_message::MediaDataHeader* Arena::CreateMaybeMessage< ::media_message::MediaDataHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::media_message::MediaDataHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::media_message::MediaData* Arena::CreateMaybeMessage< ::media_message::MediaData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::media_message::MediaData >(arena);
}
template<> PROTOBUF_NOINLINE ::media_message::StreamMessage_Join* Arena::CreateMaybeMessage< ::media_message::StreamMessage_Join >(Arena* arena) {
  return Arena::CreateMessageInternal< ::media_message::StreamMessage_Join >(arena);
}
template<> PROTOBUF_NOINLINE ::media_message::StreamMessage_JoinAck* Arena::CreateMaybeMessage< ::media_message::StreamMessage_JoinAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::media_message::StreamMessage_JoinAck >(arena);
}
template<> PROTOBUF_NOINLINE ::media_message::StreamMessage_IdrRequest* Arena::CreateMaybeMessage< ::media_message::StreamMessage_IdrRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::media_message::StreamMessage_IdrRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::media_message::StreamMessage_StreamContent* Arena::CreateMaybeMessage< ::media_message::StreamMessage_StreamContent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::media_message::StreamMessage_StreamContent >(arena);
}
template<> PROTOBUF_NOINLINE ::media_message::StreamMessage_StreamContentAck* Arena::CreateMaybeMessage< ::media_message::StreamMessage_StreamContentAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::media_message::StreamMessage_StreamContentAck >(arena);
}
template<> PROTOBUF_NOINLINE ::media_message::StreamMessage_StreamContentNack_Ack* Arena::CreateMaybeMessage< ::media_message::StreamMessage_StreamContentNack_Ack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::media_message::StreamMessage_StreamContentNack_Ack >(arena);
}
template<> PROTOBUF_NOINLINE ::media_message::StreamMessage_StreamContentNack* Arena::CreateMaybeMessage< ::media_message::StreamMessage_StreamContentNack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::media_message::StreamMessage_StreamContentNack >(arena);
}
template<> PROTOBUF_NOINLINE ::media_message::StreamMessage* Arena::CreateMaybeMessage< ::media_message::StreamMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::media_message::StreamMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
